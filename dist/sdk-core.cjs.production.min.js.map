{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/price.ts","../src/entities/fractions/percent.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/entities/token.ts","../src/entities/tickDataProvider.ts","../src/entities/tick.ts","../src/entities/tickListDataProvider.ts","../src/entities/pool.ts","../src/utils/fullMath.ts","../src/utils/sqrtPriceMath.ts","../src/utils/mostSignificantBit.ts","../src/utils/tickMath.ts","../src/entities/position.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/entities/protocol.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts","../src/utils/validateAndParseAddress.ts","../src/utils/computePoolAddress.ts","../src/utils/liquidityMath.ts","../src/utils/swapMath.ts","../src/utils/isSorted.ts","../src/utils/tickList.ts","../src/utils/maxLiquidityForAmounts.ts","../src/utils/encodeSqrtRatioX96.ts","../src/utils/priceTickConversions.ts","../src/utils/encodeRouteToPath.ts","../src/utils/tickLibrary.ts","../src/utils/position.ts","../src/utils/calldata.ts","../src/multicall.ts","../src/selfPermit.ts","../src/payments.ts","../src/nonfungiblePositionManager.ts","../src/multicallExtended.ts","../src/paymentsExtended.ts","../src/approveAndCall.ts","../src/tokens.ts","../src/swapRouter.ts","../src/defaultTokenList.ts","../src/utils/computePriceImpact.ts","../src/utils/nearestUsableTIck.ts"],"sourcesContent":["export const WRAPPED_NATIVE_TOKEN_ADDRESS =\n  \"0x98E1817244d130D8fE05591ba517d3f24Db035Ec\";\n\nexport const USDC_TOKEN_ADDRESS = \"0xD1fE20F19f18F4f26CbCf97a2367a47c3866d98e\";\n\nexport const FACTORY_ADDRESS = \"0x86038EAbf8448c4a11e7987c84FdDd1b9E7AC491\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESS =\n  \"0xbD18b076DE6810dfc5Eb8B59fCa86d2308eDf023\";\n\nexport const TICK_LENS_ADDRESS = \"0x8AE85D19Ee0226A3085B313B4620E23A3Be451b2\";\n\nexport const QUOTER_V2_ADDRESS = \"0x314BB7Ef635C1c7d22E85A7Eaee4E205d6292368\";\n\nexport const MULTICALL_ADDRESS = \"0x64c5d8ef476c435A844098521F8316e175F54952\";\n\nexport const SWAP_ROUTER_02_ADDRESS =\n  \"0x76886cC532d5e2713Ab394068600969CD69dFd6d\";\n\nexport const ADDRESS_MAP = {\n  v3CoreFactoryAddress: FACTORY_ADDRESS,\n  multicallAddress: MULTICALL_ADDRESS,\n  quoterV2Address: QUOTER_V2_ADDRESS,\n  nonfungiblePositionManagerAddress: NONFUNGIBLE_POSITION_MANAGER_ADDRESS,\n  tickLensAddress: TICK_LENS_ADDRESS,\n  swapRouter02Address: SWAP_ROUTER_02_ADDRESS,\n};\n","import JSBI from \"jsbi\";\n\nexport type BigintIsh = JSBI | string | number;\n\nexport const MaxUint256 = JSBI.BigInt(\n  \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n);\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\n/**\n * The default factory enabled fee amounts, denominated in hundredths of bips.\n */\nexport enum FeeAmount {\n  LOWEST = 100,\n  LOW = 500,\n  MEDIUM = 3000,\n  HIGH = 10000,\n}\n\n/**\n * The default factory tick spacings by fee amount.\n */\nexport const TICK_SPACINGS: { [amount in FeeAmount]: number } = {\n  [FeeAmount.LOWEST]: 1,\n  [FeeAmount.LOW]: 10,\n  [FeeAmount.MEDIUM]: 60,\n  [FeeAmount.HIGH]: 200,\n};\n\n// constants used internally but not expected to be used externally\nexport const NEGATIVE_ONE = JSBI.BigInt(-1);\nexport const ZERO = JSBI.BigInt(0);\nexport const ONE = JSBI.BigInt(1);\n\n// used in liquidity amount math\nexport const Q96 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(96));\nexport const Q192 = JSBI.exponentiate(Q96, JSBI.BigInt(2));\n\nexport const POOL_INIT_CODE_HASH =\n  \"0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54\";\n\nexport const MSG_SENDER = \"0x0000000000000000000000000000000000000001\";\nexport const ADDRESS_THIS = \"0x0000000000000000000000000000000000000002\";\n\nexport const OVM_GASPRICE_ADDRESS =\n  \"0xb528D11cC114E026F138fE568744c6D45ce6Da7A\";\n\nexport const NETWORK_NAME = \"Votopia\";\n\nexport const SUBGRAPH_URL =\n  \"https://graph.brcchain.io/subgraphs/name/votopia-subgraph\";\n\nexport const JSON_RPC_PROVIER = \"https://rpc-testnet.optopia.ai\";\n","import _Big from \"big.js\";\nimport _Decimal from \"decimal.js-light\";\nimport JSBI from \"jsbi\";\nimport invariant from \"tiny-invariant\";\nimport toFormat from \"toformat\";\n\nimport { BigintIsh, Rounding } from \"../../constants\";\n\nconst Decimal = toFormat(_Decimal);\nconst Big = toFormat(_Big);\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n};\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: 0,\n  [Rounding.ROUND_HALF_UP]: 1,\n  [Rounding.ROUND_UP]: 3,\n};\n\nexport class Fraction {\n  public readonly numerator: JSBI;\n  public readonly denominator: JSBI;\n\n  public constructor(\n    numerator: BigintIsh,\n    denominator: BigintIsh = JSBI.BigInt(1)\n  ) {\n    this.numerator = JSBI.BigInt(numerator);\n    this.denominator = JSBI.BigInt(denominator);\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (\n      fractionish instanceof JSBI ||\n      typeof fractionish === \"number\" ||\n      typeof fractionish === \"string\"\n    )\n      return new Fraction(fractionish);\n\n    if (\"numerator\" in fractionish && \"denominator\" in fractionish)\n      return fractionish;\n    throw new Error(\"Could not parse fraction\");\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator);\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(\n      JSBI.remainder(this.numerator, this.denominator),\n      this.denominator\n    );\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator);\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other);\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(\n        JSBI.add(this.numerator, otherParsed.numerator),\n        this.denominator\n      );\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    );\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other);\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(\n        JSBI.subtract(this.numerator, otherParsed.numerator),\n        this.denominator\n      );\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    );\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    );\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    );\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    );\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    );\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    );\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: \"\" },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(\n      Number.isInteger(significantDigits),\n      `${significantDigits} is not an integer.`\n    );\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`);\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding],\n    });\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: \"\" },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(\n      Number.isInteger(decimalPlaces),\n      `${decimalPlaces} is not an integer.`\n    );\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`);\n\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toFormat(decimalPlaces, format);\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator);\n  }\n}\n","import _Big from \"big.js\";\nimport JSBI from \"jsbi\";\nimport invariant from \"tiny-invariant\";\nimport toFormat from \"toformat\";\n\nimport { BigintIsh, MaxUint256, Rounding } from \"../../constants\";\n\nimport { Currency } from \"../currency\";\nimport { Token } from \"../token\";\nimport { Fraction } from \"./fraction\";\n\nconst Big = toFormat(_Big);\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T;\n  public readonly decimalScale: JSBI;\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(\n    currency: T,\n    rawAmount: BigintIsh,\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount);\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh,\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator);\n  }\n\n  protected constructor(\n    currency: T,\n    numerator: BigintIsh,\n    denominator?: BigintIsh,\n  ) {\n    super(numerator, denominator);\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), \"AMOUNT\");\n    this.currency = currency;\n    this.decimalScale = JSBI.exponentiate(\n      JSBI.BigInt(10),\n      JSBI.BigInt(currency.decimals),\n    );\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), \"CURRENCY\");\n    const added = super.add(other);\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      added.numerator,\n      added.denominator,\n    );\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), \"CURRENCY\");\n    const subtracted = super.subtract(other);\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      subtracted.numerator,\n      subtracted.denominator,\n    );\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other);\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      multiplied.numerator,\n      multiplied.denominator,\n    );\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other);\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      divided.numerator,\n      divided.denominator,\n    );\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    return super\n      .divide(this.decimalScale)\n      .toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, \"DECIMALS\");\n    return super\n      .divide(this.decimalScale)\n      .toFixed(decimalPlaces, format, rounding);\n  }\n\n  public toExact(format: object = { groupSeparator: \"\" }): string {\n    Big.DP = this.currency.decimals;\n    return new Big(this.quotient.toString())\n      .div(this.decimalScale.toString())\n      .toFormat(format);\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>;\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency.wrapped,\n      this.numerator,\n      this.denominator,\n    );\n  }\n}\n","import JSBI from \"jsbi\";\nimport invariant from \"tiny-invariant\";\n\nimport { BigintIsh, Rounding } from \"../../constants\";\n\nimport { Currency } from \"../currency\";\nimport { CurrencyAmount } from \"./currencyAmount\";\nimport { Fraction } from \"./fraction\";\n\nexport class Price<\n  TBase extends Currency,\n  TQuote extends Currency,\n> extends Fraction {\n  public readonly baseCurrency: TBase; // input i.e. denominator\n  public readonly quoteCurrency: TQuote; // output i.e. numerator\n  public readonly scalar: Fraction; // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>;\n            quoteAmount: CurrencyAmount<TQuote>;\n          },\n        ]\n  ) {\n    let baseCurrency: TBase,\n      quoteCurrency: TQuote,\n      denominator: BigintIsh,\n      numerator: BigintIsh;\n\n    if (args.length === 4) {\n      [baseCurrency, quoteCurrency, denominator, numerator] = args;\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount);\n      [baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ];\n    }\n    super(numerator, denominator);\n\n    this.baseCurrency = baseCurrency;\n    this.quoteCurrency = quoteCurrency;\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals)),\n    );\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(\n      this.quoteCurrency,\n      this.baseCurrency,\n      this.numerator,\n      this.denominator,\n    );\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(\n    other: Price<TQuote, TOtherQuote>,\n  ): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), \"TOKEN\");\n    const fraction = super.multiply(other);\n    return new Price(\n      this.baseCurrency,\n      other.quoteCurrency,\n      fraction.denominator,\n      fraction.numerator,\n    );\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), \"TOKEN\");\n    const result = super.multiply(currencyAmount);\n    return CurrencyAmount.fromFractionalAmount(\n      this.quoteCurrency,\n      result.numerator,\n      result.denominator,\n    );\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar);\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding?: Rounding,\n  ): string {\n    return this.adjustedForDecimals.toSignificant(\n      significantDigits,\n      format,\n      rounding,\n    );\n  }\n\n  public toFixed(\n    decimalPlaces: number = 4,\n    format?: object,\n    rounding?: Rounding,\n  ): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);\n  }\n}\n","import JSBI from \"jsbi\";\n\nimport { BigintIsh, Rounding } from \"../../constants\";\n\nimport { Fraction } from \"./fraction\";\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100));\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator);\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true;\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other));\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other));\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other));\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other));\n  }\n\n  public toSignificant(\n    significantDigits: number = 5,\n    format?: object,\n    rounding?: Rounding,\n  ): string {\n    return super\n      .multiply(ONE_HUNDRED)\n      .toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(\n    decimalPlaces: number = 2,\n    format?: object,\n    rounding?: Rounding,\n  ): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\n  }\n}\n","import invariant from \"tiny-invariant\";\n\nimport { Currency } from \"./currency\";\nimport { Token } from \"./token\";\n\nexport abstract class BaseCurrency {\n  public abstract readonly isNative: boolean;\n  public abstract readonly isToken: boolean;\n\n  public readonly decimals: number;\n  public readonly symbol: string;\n  public readonly icon?: string;\n  public readonly coingeckoId?: string;\n  public readonly name?: string;\n\n  protected constructor(\n    decimals: number,\n    symbol: string,\n    name: string,\n    icon?: string,\n    coingeckoId?: string\n  ) {\n    invariant(\n      decimals >= 0 && decimals < 255 && Number.isInteger(decimals),\n      \"DECIMALS\"\n    );\n\n    this.decimals = decimals;\n    this.symbol = symbol;\n    this.name = name;\n    this.icon = icon;\n    this.coingeckoId = coingeckoId;\n  }\n\n  public abstract equals(other: Currency): boolean;\n\n  public abstract get wrapped(): Token;\n}\n","import { BaseCurrency } from \"./baseCurrency\";\n\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true;\n  public readonly isToken: false = false;\n}\n","import { BigNumber } from \"@ethersproject/bignumber\";\nimport invariant from \"tiny-invariant\";\n\nimport { BaseCurrency } from \"./baseCurrency\";\nimport { Currency } from \"./currency\";\n\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false;\n  public readonly isToken: true = true;\n\n  public readonly address: string;\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber;\n  public readonly sellFeeBps?: BigNumber;\n\n  public constructor(\n    address: string,\n    decimals: number,\n    symbol: string,\n    name: string,\n    icon?: string,\n    coingeckoId?: string,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber,\n  ) {\n    super(decimals, symbol, name, icon, coingeckoId);\n    this.address = address;\n\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), \"NON-NEGATIVE FOT FEES\");\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), \"NON-NEGATIVE FOT FEES\");\n    }\n    this.buyFeeBps = buyFeeBps;\n    this.sellFeeBps = sellFeeBps;\n  }\n\n  public equals(other: Currency): boolean {\n    return (\n      other.isToken &&\n      this.address.toLowerCase() === other.address.toLowerCase()\n    );\n  }\n\n  public sortsBefore(other: Token): boolean {\n    invariant(\n      this.address.toLowerCase() !== other.address.toLowerCase(),\n      \"ADDRESSES\",\n    );\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  }\n\n  public get wrapped(): Token {\n    return this;\n  }\n}\n","import { BigintIsh } from \"../constants\";\n\n/**\n * Provides information about ticks\n */\nexport interface TickDataProvider {\n  /**\n   * Return information corresponding to a specific tick\n   * @param tick the tick to load\n   */\n  getTick(tick: number): Promise<{ liquidityNet: BigintIsh }>;\n\n  /**\n   * Return the next tick that is initialized within a single word\n   * @param tick The current tick\n   * @param lte Whether the next tick should be lte the current tick\n   * @param tickSpacing The tick spacing of the pool\n   */\n  nextInitializedTickWithinOneWord(\n    tick: number,\n    lte: boolean,\n    tickSpacing: number,\n  ): Promise<[number, boolean]>;\n}\n\n/**\n * This tick data provider does not know how to fetch any tick data. It throws whenever it is required. Useful if you\n * do not need to load tick data for your use case.\n */\nexport class NoTickDataProvider implements TickDataProvider {\n  private static ERROR_MESSAGE = \"No tick data provider was given\";\n  async getTick(_tick: number): Promise<{ liquidityNet: BigintIsh }> {\n    throw new Error(NoTickDataProvider.ERROR_MESSAGE);\n  }\n\n  async nextInitializedTickWithinOneWord(\n    _tick: number,\n    _lte: boolean,\n    _tickSpacing: number,\n  ): Promise<[number, boolean]> {\n    throw new Error(NoTickDataProvider.ERROR_MESSAGE);\n  }\n}\n","import JSBI from \"jsbi\";\nimport invariant from \"tiny-invariant\";\nimport { BigintIsh } from \"../constants\";\nimport { TickMath } from \"../utils\";\n\nexport interface TickConstructorArgs {\n  index: number;\n  liquidityGross: BigintIsh;\n  liquidityNet: BigintIsh;\n}\n\nexport class Tick {\n  public readonly index: number;\n  public readonly liquidityGross: JSBI;\n  public readonly liquidityNet: JSBI;\n\n  constructor({ index, liquidityGross, liquidityNet }: TickConstructorArgs) {\n    invariant(index >= TickMath.MIN_TICK && index <= TickMath.MAX_TICK, \"TICK\");\n    this.index = index;\n    this.liquidityGross = JSBI.BigInt(liquidityGross);\n    this.liquidityNet = JSBI.BigInt(liquidityNet);\n  }\n}\n","import { BigintIsh } from \"../constants\";\nimport { TickList } from \"../utils\";\nimport { Tick, TickConstructorArgs } from \"./tick\";\nimport { TickDataProvider } from \"./tickDataProvider\";\n\n/**\n * A data provider for ticks that is backed by an in-memory array of ticks.\n */\nexport class TickListDataProvider implements TickDataProvider {\n  private ticks: readonly Tick[];\n\n  constructor(ticks: (Tick | TickConstructorArgs)[], tickSpacing: number) {\n    const ticksMapped: Tick[] = ticks.map((t) =>\n      t instanceof Tick ? t : new Tick(t),\n    );\n    TickList.validateList(ticksMapped, tickSpacing);\n    this.ticks = ticksMapped;\n  }\n\n  async getTick(\n    tick: number,\n  ): Promise<{ liquidityNet: BigintIsh; liquidityGross: BigintIsh }> {\n    return TickList.getTick(this.ticks, tick);\n  }\n\n  async nextInitializedTickWithinOneWord(\n    tick: number,\n    lte: boolean,\n    tickSpacing: number,\n  ): Promise<[number, boolean]> {\n    return TickList.nextInitializedTickWithinOneWord(\n      this.ticks,\n      tick,\n      lte,\n      tickSpacing,\n    );\n  }\n}\n","import JSBI from \"jsbi\";\nimport invariant from \"tiny-invariant\";\n\nimport {\n  BigintIsh,\n  FeeAmount,\n  NEGATIVE_ONE,\n  ONE,\n  Q192,\n  TICK_SPACINGS,\n  ZERO,\n} from \"../constants\";\n\nimport { FACTORY_ADDRESS } from \"../addresses\";\n\nimport {\n  LiquidityMath,\n  SwapMath,\n  TickMath,\n  computePoolAddress,\n} from \"../utils\";\n\nimport { CurrencyAmount, Price } from \"./fractions\";\nimport { Tick, TickConstructorArgs } from \"./tick\";\nimport { NoTickDataProvider, TickDataProvider } from \"./tickDataProvider\";\nimport { TickListDataProvider } from \"./tickListDataProvider\";\nimport { Token } from \"./token\";\n\ninterface StepComputations {\n  sqrtPriceStartX96: JSBI;\n  tickNext: number;\n  initialized: boolean;\n  sqrtPriceNextX96: JSBI;\n  amountIn: JSBI;\n  amountOut: JSBI;\n  feeAmount: JSBI;\n}\n\n/**\n * By default, pools will not allow operations that require ticks.\n */\nconst NO_TICK_DATA_PROVIDER_DEFAULT = new NoTickDataProvider();\n\n/**\n * Represents a V3 pool\n */\nexport class Pool {\n  public readonly token0: Token;\n  public readonly token1: Token;\n  public readonly fee: FeeAmount;\n  public readonly sqrtRatioX96: JSBI;\n  public readonly liquidity: JSBI;\n  public readonly tickCurrent: number;\n  public readonly tickDataProvider: TickDataProvider;\n\n  private _token0Price?: Price<Token, Token>;\n  private _token1Price?: Price<Token, Token>;\n\n  public static getAddress(\n    tokenA: Token,\n    tokenB: Token,\n    fee: FeeAmount,\n    initCodeHashManualOverride?: string,\n    factoryAddressOverride?: string,\n  ): string {\n    return computePoolAddress({\n      factoryAddress: factoryAddressOverride ?? FACTORY_ADDRESS,\n      fee,\n      tokenA,\n      tokenB,\n      initCodeHashManualOverride,\n    });\n  }\n\n  /**\n   * Construct a pool\n   * @param tokenA One of the tokens in the pool\n   * @param tokenB The other token in the pool\n   * @param fee The fee in hundredths of a bips of the input amount of every swap that is collected by the pool\n   * @param sqrtRatioX96 The sqrt of the current ratio of amounts of token1 to token0\n   * @param liquidity The current value of in range liquidity\n   * @param tickCurrent The current tick of the pool\n   * @param ticks The current state of the pool ticks or a data provider that can return tick data\n   */\n  public constructor(\n    tokenA: Token,\n    tokenB: Token,\n    fee: FeeAmount,\n    sqrtRatioX96: BigintIsh,\n    liquidity: BigintIsh,\n    tickCurrent: number,\n    ticks:\n      | TickDataProvider\n      | (Tick | TickConstructorArgs)[] = NO_TICK_DATA_PROVIDER_DEFAULT,\n  ) {\n    invariant(Number.isInteger(fee) && fee < 1_000_000, \"FEE\");\n\n    const tickCurrentSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent);\n    const nextTickSqrtRatioX96 = TickMath.getSqrtRatioAtTick(tickCurrent + 1);\n    invariant(\n      JSBI.greaterThanOrEqual(\n        JSBI.BigInt(sqrtRatioX96),\n        tickCurrentSqrtRatioX96,\n      ) &&\n        JSBI.lessThanOrEqual(JSBI.BigInt(sqrtRatioX96), nextTickSqrtRatioX96),\n      \"PRICE_BOUNDS\",\n    );\n    // always create a copy of the list since we want the pool's tick list to be immutable\n    [this.token0, this.token1] = tokenA.sortsBefore(tokenB)\n      ? [tokenA, tokenB]\n      : [tokenB, tokenA];\n    this.fee = fee;\n    this.sqrtRatioX96 = JSBI.BigInt(sqrtRatioX96);\n    this.liquidity = JSBI.BigInt(liquidity);\n    this.tickCurrent = tickCurrent;\n    this.tickDataProvider = Array.isArray(ticks)\n      ? new TickListDataProvider(ticks, TICK_SPACINGS[fee])\n      : ticks;\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token The token to check\n   * @returns True if token is either token0 or token\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1);\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of token0, i.e. the ratio of token1 over token0\n   */\n  public get token0Price(): Price<Token, Token> {\n    return (\n      this._token0Price ??\n      (this._token0Price = new Price(\n        this.token0,\n        this.token1,\n        Q192,\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96),\n      ))\n    );\n  }\n\n  /**\n   * Returns the current mid price of the pool in terms of token1, i.e. the ratio of token0 over token1\n   */\n  public get token1Price(): Price<Token, Token> {\n    return (\n      this._token1Price ??\n      (this._token1Price = new Price(\n        this.token1,\n        this.token0,\n        JSBI.multiply(this.sqrtRatioX96, this.sqrtRatioX96),\n        Q192,\n      ))\n    );\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pool.\n   * @param token The token to return price of\n   * @returns The price of the given token, in terms of the other.\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), \"TOKEN\");\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\n  }\n\n  /**\n   * Given an input amount of a token, return the computed output amount, and a pool with state updated after the trade\n   * @param inputAmount The input amount for which to quote the output amount\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit\n   * @returns The output amount and the pool with updated state\n   */\n  public async getOutputAmount(\n    inputAmount: CurrencyAmount<Token>,\n    sqrtPriceLimitX96?: JSBI,\n  ): Promise<[CurrencyAmount<Token>, Pool]> {\n    invariant(this.involvesToken(inputAmount.currency), \"TOKEN\");\n\n    const zeroForOne = inputAmount.currency.equals(this.token0);\n\n    const {\n      amountCalculated: outputAmount,\n      sqrtRatioX96,\n      liquidity,\n      tickCurrent,\n    } = await this.swap(zeroForOne, inputAmount.quotient, sqrtPriceLimitX96);\n    const outputToken = zeroForOne ? this.token1 : this.token0;\n    return [\n      CurrencyAmount.fromRawAmount(\n        outputToken,\n        JSBI.multiply(outputAmount, NEGATIVE_ONE),\n      ),\n      new Pool(\n        this.token0,\n        this.token1,\n        this.fee,\n        sqrtRatioX96,\n        liquidity,\n        tickCurrent,\n        this.tickDataProvider,\n      ),\n    ];\n  }\n\n  /**\n   * Given a desired output amount of a token, return the computed input amount and a pool with state updated after the trade\n   * @param outputAmount the output amount for which to quote the input amount\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\n   * @returns The input amount and the pool with updated state\n   */\n  public async getInputAmount(\n    outputAmount: CurrencyAmount<Token>,\n    sqrtPriceLimitX96?: JSBI,\n  ): Promise<[CurrencyAmount<Token>, Pool]> {\n    invariant(\n      outputAmount.currency.isToken &&\n        this.involvesToken(outputAmount.currency),\n      \"TOKEN\",\n    );\n\n    const zeroForOne = outputAmount.currency.equals(this.token1);\n\n    const {\n      amountCalculated: inputAmount,\n      sqrtRatioX96,\n      liquidity,\n      tickCurrent,\n    } = await this.swap(\n      zeroForOne,\n      JSBI.multiply(outputAmount.quotient, NEGATIVE_ONE),\n      sqrtPriceLimitX96,\n    );\n    const inputToken = zeroForOne ? this.token0 : this.token1;\n    return [\n      CurrencyAmount.fromRawAmount(inputToken, inputAmount),\n      new Pool(\n        this.token0,\n        this.token1,\n        this.fee,\n        sqrtRatioX96,\n        liquidity,\n        tickCurrent,\n        this.tickDataProvider,\n      ),\n    ];\n  }\n\n  /**\n   * Executes a swap\n   * @param zeroForOne Whether the amount in is token0 or token1\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n   * @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap\n   * @returns amountCalculated\n   * @returns sqrtRatioX96\n   * @returns liquidity\n   * @returns tickCurrent\n   */\n  private async swap(\n    zeroForOne: boolean,\n    amountSpecified: JSBI,\n    sqrtPriceLimitX96?: JSBI,\n  ): Promise<{\n    amountCalculated: JSBI;\n    sqrtRatioX96: JSBI;\n    liquidity: JSBI;\n    tickCurrent: number;\n  }> {\n    if (!sqrtPriceLimitX96)\n      sqrtPriceLimitX96 = zeroForOne\n        ? JSBI.add(TickMath.MIN_SQRT_RATIO, ONE)\n        : JSBI.subtract(TickMath.MAX_SQRT_RATIO, ONE);\n\n    if (zeroForOne) {\n      invariant(\n        JSBI.greaterThan(sqrtPriceLimitX96, TickMath.MIN_SQRT_RATIO),\n        \"RATIO_MIN\",\n      );\n      invariant(\n        JSBI.lessThan(sqrtPriceLimitX96, this.sqrtRatioX96),\n        \"RATIO_CURRENT\",\n      );\n    } else {\n      invariant(\n        JSBI.lessThan(sqrtPriceLimitX96, TickMath.MAX_SQRT_RATIO),\n        \"RATIO_MAX\",\n      );\n      invariant(\n        JSBI.greaterThan(sqrtPriceLimitX96, this.sqrtRatioX96),\n        \"RATIO_CURRENT\",\n      );\n    }\n\n    const exactInput = JSBI.greaterThanOrEqual(amountSpecified, ZERO);\n\n    // keep track of swap state\n\n    const state = {\n      amountSpecifiedRemaining: amountSpecified,\n      amountCalculated: ZERO,\n      sqrtPriceX96: this.sqrtRatioX96,\n      tick: this.tickCurrent,\n      liquidity: this.liquidity,\n    };\n\n    // start swap while loop\n    while (\n      JSBI.notEqual(state.amountSpecifiedRemaining, ZERO) &&\n      state.sqrtPriceX96 != sqrtPriceLimitX96\n    ) {\n      let step: Partial<StepComputations> = {};\n      step.sqrtPriceStartX96 = state.sqrtPriceX96;\n\n      // because each iteration of the while loop rounds, we can't optimize this code (relative to the smart contract)\n      // by simply traversing to the next available tick, we instead need to exactly replicate\n      // tickBitmap.nextInitializedTickWithinOneWord\n      [step.tickNext, step.initialized] =\n        await this.tickDataProvider.nextInitializedTickWithinOneWord(\n          state.tick,\n          zeroForOne,\n          this.tickSpacing,\n        );\n\n      if (step.tickNext < TickMath.MIN_TICK) {\n        step.tickNext = TickMath.MIN_TICK;\n      } else if (step.tickNext > TickMath.MAX_TICK) {\n        step.tickNext = TickMath.MAX_TICK;\n      }\n\n      step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);\n      [state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount] =\n        SwapMath.computeSwapStep(\n          state.sqrtPriceX96,\n          (\n            zeroForOne\n              ? JSBI.lessThan(step.sqrtPriceNextX96, sqrtPriceLimitX96)\n              : JSBI.greaterThan(step.sqrtPriceNextX96, sqrtPriceLimitX96)\n          )\n            ? sqrtPriceLimitX96\n            : step.sqrtPriceNextX96,\n          state.liquidity,\n          state.amountSpecifiedRemaining,\n          this.fee,\n        );\n\n      if (exactInput) {\n        state.amountSpecifiedRemaining = JSBI.subtract(\n          state.amountSpecifiedRemaining,\n          JSBI.add(step.amountIn, step.feeAmount),\n        );\n        state.amountCalculated = JSBI.subtract(\n          state.amountCalculated,\n          step.amountOut,\n        );\n      } else {\n        state.amountSpecifiedRemaining = JSBI.add(\n          state.amountSpecifiedRemaining,\n          step.amountOut,\n        );\n        state.amountCalculated = JSBI.add(\n          state.amountCalculated,\n          JSBI.add(step.amountIn, step.feeAmount),\n        );\n      }\n\n      // TODO\n      if (JSBI.equal(state.sqrtPriceX96, step.sqrtPriceNextX96)) {\n        // if the tick is initialized, run the tick transition\n        if (step.initialized) {\n          let liquidityNet = JSBI.BigInt(\n            (await this.tickDataProvider.getTick(step.tickNext)).liquidityNet,\n          );\n          // if we're moving leftward, we interpret liquidityNet as the opposite sign\n          // safe because liquidityNet cannot be type(int128).min\n          if (zeroForOne)\n            liquidityNet = JSBI.multiply(liquidityNet, NEGATIVE_ONE);\n\n          state.liquidity = LiquidityMath.addDelta(\n            state.liquidity,\n            liquidityNet,\n          );\n        }\n\n        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\n      } else if (JSBI.notEqual(state.sqrtPriceX96, step.sqrtPriceStartX96)) {\n        // updated comparison function\n        // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n        state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\n      }\n    }\n\n    return {\n      amountCalculated: state.amountCalculated,\n      sqrtRatioX96: state.sqrtPriceX96,\n      liquidity: state.liquidity,\n      tickCurrent: state.tick,\n    };\n  }\n\n  public get tickSpacing(): number {\n    return TICK_SPACINGS[this.fee];\n  }\n}\n","import JSBI from \"jsbi\";\nimport { ONE, ZERO } from \"../constants\";\n\nexport abstract class FullMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static mulDivRoundingUp(a: JSBI, b: JSBI, denominator: JSBI): JSBI {\n    const product = JSBI.multiply(a, b);\n    let result = JSBI.divide(product, denominator);\n    if (JSBI.notEqual(JSBI.remainder(product, denominator), ZERO))\n      result = JSBI.add(result, ONE);\n    return result;\n  }\n}\n","import JSBI from \"jsbi\";\nimport invariant from \"tiny-invariant\";\nimport { ONE, ZERO, Q96, MaxUint256 } from \"../constants\";\nimport { FullMath } from \"./fullMath\";\n\nconst MaxUint160 = JSBI.subtract(\n  JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(160)),\n  ONE,\n);\n\nfunction multiplyIn256(x: JSBI, y: JSBI): JSBI {\n  const product = JSBI.multiply(x, y);\n  return JSBI.bitwiseAnd(product, MaxUint256);\n}\n\nfunction addIn256(x: JSBI, y: JSBI): JSBI {\n  const sum = JSBI.add(x, y);\n  return JSBI.bitwiseAnd(sum, MaxUint256);\n}\n\nexport abstract class SqrtPriceMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static getAmount0Delta(\n    sqrtRatioAX96: JSBI,\n    sqrtRatioBX96: JSBI,\n    liquidity: JSBI,\n    roundUp: boolean,\n  ): JSBI {\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n      [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\n    }\n\n    const numerator1 = JSBI.leftShift(liquidity, JSBI.BigInt(96));\n    const numerator2 = JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96);\n\n    return roundUp\n      ? FullMath.mulDivRoundingUp(\n          FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\n          ONE,\n          sqrtRatioAX96,\n        )\n      : JSBI.divide(\n          JSBI.divide(JSBI.multiply(numerator1, numerator2), sqrtRatioBX96),\n          sqrtRatioAX96,\n        );\n  }\n\n  public static getAmount1Delta(\n    sqrtRatioAX96: JSBI,\n    sqrtRatioBX96: JSBI,\n    liquidity: JSBI,\n    roundUp: boolean,\n  ): JSBI {\n    if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n      [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\n    }\n\n    return roundUp\n      ? FullMath.mulDivRoundingUp(\n          liquidity,\n          JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96),\n          Q96,\n        )\n      : JSBI.divide(\n          JSBI.multiply(liquidity, JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96)),\n          Q96,\n        );\n  }\n\n  public static getNextSqrtPriceFromInput(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amountIn: JSBI,\n    zeroForOne: boolean,\n  ): JSBI {\n    invariant(JSBI.greaterThan(sqrtPX96, ZERO));\n    invariant(JSBI.greaterThan(liquidity, ZERO));\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromAmount0RoundingUp(\n          sqrtPX96,\n          liquidity,\n          amountIn,\n          true,\n        )\n      : this.getNextSqrtPriceFromAmount1RoundingDown(\n          sqrtPX96,\n          liquidity,\n          amountIn,\n          true,\n        );\n  }\n\n  public static getNextSqrtPriceFromOutput(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amountOut: JSBI,\n    zeroForOne: boolean,\n  ): JSBI {\n    invariant(JSBI.greaterThan(sqrtPX96, ZERO));\n    invariant(JSBI.greaterThan(liquidity, ZERO));\n\n    return zeroForOne\n      ? this.getNextSqrtPriceFromAmount1RoundingDown(\n          sqrtPX96,\n          liquidity,\n          amountOut,\n          false,\n        )\n      : this.getNextSqrtPriceFromAmount0RoundingUp(\n          sqrtPX96,\n          liquidity,\n          amountOut,\n          false,\n        );\n  }\n\n  private static getNextSqrtPriceFromAmount0RoundingUp(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amount: JSBI,\n    add: boolean,\n  ): JSBI {\n    if (JSBI.equal(amount, ZERO)) return sqrtPX96;\n    const numerator1 = JSBI.leftShift(liquidity, JSBI.BigInt(96));\n\n    if (add) {\n      let product = multiplyIn256(amount, sqrtPX96);\n      if (JSBI.equal(JSBI.divide(product, amount), sqrtPX96)) {\n        const denominator = addIn256(numerator1, product);\n        if (JSBI.greaterThanOrEqual(denominator, numerator1)) {\n          return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator);\n        }\n      }\n\n      return FullMath.mulDivRoundingUp(\n        numerator1,\n        ONE,\n        JSBI.add(JSBI.divide(numerator1, sqrtPX96), amount),\n      );\n    } else {\n      let product = multiplyIn256(amount, sqrtPX96);\n\n      invariant(JSBI.equal(JSBI.divide(product, amount), sqrtPX96));\n      invariant(JSBI.greaterThan(numerator1, product));\n      const denominator = JSBI.subtract(numerator1, product);\n      return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator);\n    }\n  }\n\n  private static getNextSqrtPriceFromAmount1RoundingDown(\n    sqrtPX96: JSBI,\n    liquidity: JSBI,\n    amount: JSBI,\n    add: boolean,\n  ): JSBI {\n    if (add) {\n      const quotient = JSBI.lessThanOrEqual(amount, MaxUint160)\n        ? JSBI.divide(JSBI.leftShift(amount, JSBI.BigInt(96)), liquidity)\n        : JSBI.divide(JSBI.multiply(amount, Q96), liquidity);\n\n      return JSBI.add(sqrtPX96, quotient);\n    } else {\n      const quotient = FullMath.mulDivRoundingUp(amount, Q96, liquidity);\n\n      invariant(JSBI.greaterThan(sqrtPX96, quotient));\n      return JSBI.subtract(sqrtPX96, quotient);\n    }\n  }\n}\n","import JSBI from \"jsbi\";\nimport invariant from \"tiny-invariant\";\nimport { ZERO, MaxUint256 } from \"../constants\";\n\nconst TWO = JSBI.BigInt(2);\nconst POWERS_OF_2 = [128, 64, 32, 16, 8, 4, 2, 1].map(\n  (pow: number): [number, JSBI] => [\n    pow,\n    JSBI.exponentiate(TWO, JSBI.BigInt(pow)),\n  ],\n);\n\nexport function mostSignificantBit(x: JSBI): number {\n  invariant(JSBI.greaterThan(x, ZERO), \"ZERO\");\n  invariant(JSBI.lessThanOrEqual(x, MaxUint256), \"MAX\");\n\n  let msb: number = 0;\n  for (const [power, min] of POWERS_OF_2) {\n    if (JSBI.greaterThanOrEqual(x, min)) {\n      x = JSBI.signedRightShift(x, JSBI.BigInt(power));\n      msb += power;\n    }\n  }\n  return msb;\n}\n","import JSBI from \"jsbi\";\nimport invariant from \"tiny-invariant\";\nimport { ONE, ZERO, MaxUint256 } from \"../constants\";\nimport { mostSignificantBit } from \"./mostSignificantBit\";\n\nfunction mulShift(val: JSBI, mulBy: string): JSBI {\n  return JSBI.signedRightShift(\n    JSBI.multiply(val, JSBI.BigInt(mulBy)),\n    JSBI.BigInt(128),\n  );\n}\n\nconst Q32 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(32));\n\nexport abstract class TickMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * The minimum tick that can be used on any pool.\n   */\n  public static MIN_TICK: number = -887272;\n  /**\n   * The maximum tick that can be used on any pool.\n   */\n  public static MAX_TICK: number = -TickMath.MIN_TICK;\n\n  /**\n   * The sqrt ratio corresponding to the minimum tick that could be used on any pool.\n   */\n  public static MIN_SQRT_RATIO: JSBI = JSBI.BigInt(\"4295128739\");\n  /**\n   * The sqrt ratio corresponding to the maximum tick that could be used on any pool.\n   */\n  public static MAX_SQRT_RATIO: JSBI = JSBI.BigInt(\n    \"1461446703485210103287273052203988822378723970342\",\n  );\n\n  /**\n   * Returns the sqrt ratio as a Q64.96 for the given tick. The sqrt ratio is computed as sqrt(1.0001)^tick\n   * @param tick the tick for which to compute the sqrt ratio\n   */\n  public static getSqrtRatioAtTick(tick: number): JSBI {\n    invariant(\n      tick >= TickMath.MIN_TICK &&\n        tick <= TickMath.MAX_TICK &&\n        Number.isInteger(tick),\n      \"TICK\",\n    );\n    const absTick: number = tick < 0 ? tick * -1 : tick;\n\n    let ratio: JSBI =\n      (absTick & 0x1) != 0\n        ? JSBI.BigInt(\"0xfffcb933bd6fad37aa2d162d1a594001\")\n        : JSBI.BigInt(\"0x100000000000000000000000000000000\");\n    if ((absTick & 0x2) != 0)\n      ratio = mulShift(ratio, \"0xfff97272373d413259a46990580e213a\");\n    if ((absTick & 0x4) != 0)\n      ratio = mulShift(ratio, \"0xfff2e50f5f656932ef12357cf3c7fdcc\");\n    if ((absTick & 0x8) != 0)\n      ratio = mulShift(ratio, \"0xffe5caca7e10e4e61c3624eaa0941cd0\");\n    if ((absTick & 0x10) != 0)\n      ratio = mulShift(ratio, \"0xffcb9843d60f6159c9db58835c926644\");\n    if ((absTick & 0x20) != 0)\n      ratio = mulShift(ratio, \"0xff973b41fa98c081472e6896dfb254c0\");\n    if ((absTick & 0x40) != 0)\n      ratio = mulShift(ratio, \"0xff2ea16466c96a3843ec78b326b52861\");\n    if ((absTick & 0x80) != 0)\n      ratio = mulShift(ratio, \"0xfe5dee046a99a2a811c461f1969c3053\");\n    if ((absTick & 0x100) != 0)\n      ratio = mulShift(ratio, \"0xfcbe86c7900a88aedcffc83b479aa3a4\");\n    if ((absTick & 0x200) != 0)\n      ratio = mulShift(ratio, \"0xf987a7253ac413176f2b074cf7815e54\");\n    if ((absTick & 0x400) != 0)\n      ratio = mulShift(ratio, \"0xf3392b0822b70005940c7a398e4b70f3\");\n    if ((absTick & 0x800) != 0)\n      ratio = mulShift(ratio, \"0xe7159475a2c29b7443b29c7fa6e889d9\");\n    if ((absTick & 0x1000) != 0)\n      ratio = mulShift(ratio, \"0xd097f3bdfd2022b8845ad8f792aa5825\");\n    if ((absTick & 0x2000) != 0)\n      ratio = mulShift(ratio, \"0xa9f746462d870fdf8a65dc1f90e061e5\");\n    if ((absTick & 0x4000) != 0)\n      ratio = mulShift(ratio, \"0x70d869a156d2a1b890bb3df62baf32f7\");\n    if ((absTick & 0x8000) != 0)\n      ratio = mulShift(ratio, \"0x31be135f97d08fd981231505542fcfa6\");\n    if ((absTick & 0x10000) != 0)\n      ratio = mulShift(ratio, \"0x9aa508b5b7a84e1c677de54f3e99bc9\");\n    if ((absTick & 0x20000) != 0)\n      ratio = mulShift(ratio, \"0x5d6af8dedb81196699c329225ee604\");\n    if ((absTick & 0x40000) != 0)\n      ratio = mulShift(ratio, \"0x2216e584f5fa1ea926041bedfe98\");\n    if ((absTick & 0x80000) != 0)\n      ratio = mulShift(ratio, \"0x48a170391f7dc42444e8fa2\");\n\n    if (tick > 0) ratio = JSBI.divide(MaxUint256, ratio);\n\n    // back to Q96\n    return JSBI.greaterThan(JSBI.remainder(ratio, Q32), ZERO)\n      ? JSBI.add(JSBI.divide(ratio, Q32), ONE)\n      : JSBI.divide(ratio, Q32);\n  }\n\n  /**\n   * Returns the tick corresponding to a given sqrt ratio, s.t. #getSqrtRatioAtTick(tick) <= sqrtRatioX96\n   * and #getSqrtRatioAtTick(tick + 1) > sqrtRatioX96\n   * @param sqrtRatioX96 the sqrt ratio as a Q64.96 for which to compute the tick\n   */\n  public static getTickAtSqrtRatio(sqrtRatioX96: JSBI): number {\n    invariant(\n      JSBI.greaterThanOrEqual(sqrtRatioX96, TickMath.MIN_SQRT_RATIO) &&\n        JSBI.lessThan(sqrtRatioX96, TickMath.MAX_SQRT_RATIO),\n      \"SQRT_RATIO\",\n    );\n\n    const sqrtRatioX128 = JSBI.leftShift(sqrtRatioX96, JSBI.BigInt(32));\n\n    const msb = mostSignificantBit(sqrtRatioX128);\n\n    let r: JSBI;\n    if (JSBI.greaterThanOrEqual(JSBI.BigInt(msb), JSBI.BigInt(128))) {\n      r = JSBI.signedRightShift(sqrtRatioX128, JSBI.BigInt(msb - 127));\n    } else {\n      r = JSBI.leftShift(sqrtRatioX128, JSBI.BigInt(127 - msb));\n    }\n\n    let log_2: JSBI = JSBI.leftShift(\n      JSBI.subtract(JSBI.BigInt(msb), JSBI.BigInt(128)),\n      JSBI.BigInt(64),\n    );\n\n    for (let i = 0; i < 14; i++) {\n      r = JSBI.signedRightShift(JSBI.multiply(r, r), JSBI.BigInt(127));\n      const f = JSBI.signedRightShift(r, JSBI.BigInt(128));\n      log_2 = JSBI.bitwiseOr(log_2, JSBI.leftShift(f, JSBI.BigInt(63 - i)));\n      r = JSBI.signedRightShift(r, f);\n    }\n\n    const log_sqrt10001 = JSBI.multiply(\n      log_2,\n      JSBI.BigInt(\"255738958999603826347141\"),\n    );\n\n    const tickLow = JSBI.toNumber(\n      JSBI.signedRightShift(\n        JSBI.subtract(\n          log_sqrt10001,\n          JSBI.BigInt(\"3402992956809132418596140100660247210\"),\n        ),\n        JSBI.BigInt(128),\n      ),\n    );\n    const tickHigh = JSBI.toNumber(\n      JSBI.signedRightShift(\n        JSBI.add(\n          log_sqrt10001,\n          JSBI.BigInt(\"291339464771989622907027621153398088495\"),\n        ),\n        JSBI.BigInt(128),\n      ),\n    );\n\n    return tickLow === tickHigh\n      ? tickLow\n      : JSBI.lessThanOrEqual(\n          TickMath.getSqrtRatioAtTick(tickHigh),\n          sqrtRatioX96,\n        )\n      ? tickHigh\n      : tickLow;\n  }\n}\n","import { Percent, Price, CurrencyAmount } from \"./fractions\";\nimport { Token } from \"./token\";\nimport { BigintIsh, MaxUint256, ZERO } from \"../constants\";\n\nimport JSBI from \"jsbi\";\nimport invariant from \"tiny-invariant\";\n\nimport {\n  maxLiquidityForAmounts,\n  tickToPrice,\n  encodeSqrtRatioX96,\n} from \"../utils\";\n\nimport { SqrtPriceMath } from \"../utils/sqrtPriceMath\";\nimport { TickMath } from \"../utils/tickMath\";\nimport { Pool } from \"./pool\";\n\ninterface PositionConstructorArgs {\n  pool: Pool;\n  tickLower: number;\n  tickUpper: number;\n  liquidity: BigintIsh;\n}\n\n/**\n * Represents a position on a Uniswap V3 Pool\n */\nexport class Position {\n  public readonly pool: Pool;\n  public readonly tickLower: number;\n  public readonly tickUpper: number;\n  public readonly liquidity: JSBI;\n\n  // cached resuts for the getters\n  private _token0Amount: CurrencyAmount<Token> | null = null;\n  private _token1Amount: CurrencyAmount<Token> | null = null;\n  private _mintAmounts: Readonly<{ amount0: JSBI; amount1: JSBI }> | null =\n    null;\n\n  /**\n   * Constructs a position for a given pool with the given liquidity\n   * @param pool For which pool the liquidity is assigned\n   * @param liquidity The amount of liquidity that is in the position\n   * @param tickLower The lower tick of the position\n   * @param tickUpper The upper tick of the position\n   */\n  public constructor({\n    pool,\n    liquidity,\n    tickLower,\n    tickUpper,\n  }: PositionConstructorArgs) {\n    invariant(tickLower < tickUpper, \"TICK_ORDER\");\n    invariant(\n      tickLower >= TickMath.MIN_TICK && tickLower % pool.tickSpacing === 0,\n      \"TICK_LOWER\",\n    );\n    invariant(\n      tickUpper <= TickMath.MAX_TICK && tickUpper % pool.tickSpacing === 0,\n      \"TICK_UPPER\",\n    );\n\n    this.pool = pool;\n    this.tickLower = tickLower;\n    this.tickUpper = tickUpper;\n    this.liquidity = JSBI.BigInt(liquidity);\n  }\n\n  /**\n   * Returns the price of token0 at the lower tick\n   */\n  public get token0PriceLower(): Price<Token, Token> {\n    return tickToPrice(this.pool.token0, this.pool.token1, this.tickLower);\n  }\n\n  /**\n   * Returns the price of token0 at the upper tick\n   */\n  public get token0PriceUpper(): Price<Token, Token> {\n    return tickToPrice(this.pool.token0, this.pool.token1, this.tickUpper);\n  }\n\n  /**\n   * Returns the amount of token0 that this position's liquidity could be burned for at the current pool price\n   */\n  public get amount0(): CurrencyAmount<Token> {\n    if (this._token0Amount === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        this._token0Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token0,\n          SqrtPriceMath.getAmount0Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false,\n          ),\n        );\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        this._token0Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token0,\n          SqrtPriceMath.getAmount0Delta(\n            this.pool.sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false,\n          ),\n        );\n      } else {\n        this._token0Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token0,\n          ZERO,\n        );\n      }\n    }\n    return this._token0Amount;\n  }\n\n  /**\n   * Returns the amount of token1 that this position's liquidity could be burned for at the current pool price\n   */\n  public get amount1(): CurrencyAmount<Token> {\n    if (this._token1Amount === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        this._token1Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token1,\n          ZERO,\n        );\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        this._token1Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token1,\n          SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            this.pool.sqrtRatioX96,\n            this.liquidity,\n            false,\n          ),\n        );\n      } else {\n        this._token1Amount = CurrencyAmount.fromRawAmount(\n          this.pool.token1,\n          SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            false,\n          ),\n        );\n      }\n    }\n    return this._token1Amount;\n  }\n\n  /**\n   * Returns the lower and upper sqrt ratios if the price 'slips' up to slippage tolerance percentage\n   * @param slippageTolerance The amount by which the price can 'slip' before the transaction will revert\n   * @returns The sqrt ratios after slippage\n   */\n  private ratiosAfterSlippage(slippageTolerance: Percent): {\n    sqrtRatioX96Lower: JSBI;\n    sqrtRatioX96Upper: JSBI;\n  } {\n    const priceLower = this.pool.token0Price.asFraction.multiply(\n      new Percent(1).subtract(slippageTolerance),\n    );\n    const priceUpper = this.pool.token0Price.asFraction.multiply(\n      slippageTolerance.add(1),\n    );\n    let sqrtRatioX96Lower = encodeSqrtRatioX96(\n      priceLower.numerator,\n      priceLower.denominator,\n    );\n    if (JSBI.lessThanOrEqual(sqrtRatioX96Lower, TickMath.MIN_SQRT_RATIO)) {\n      sqrtRatioX96Lower = JSBI.add(TickMath.MIN_SQRT_RATIO, JSBI.BigInt(1));\n    }\n    let sqrtRatioX96Upper = encodeSqrtRatioX96(\n      priceUpper.numerator,\n      priceUpper.denominator,\n    );\n    if (JSBI.greaterThanOrEqual(sqrtRatioX96Upper, TickMath.MAX_SQRT_RATIO)) {\n      sqrtRatioX96Upper = JSBI.subtract(\n        TickMath.MAX_SQRT_RATIO,\n        JSBI.BigInt(1),\n      );\n    }\n    return {\n      sqrtRatioX96Lower,\n      sqrtRatioX96Upper,\n    };\n  }\n\n  /**\n   * Returns the minimum amounts that must be sent in order to safely mint the amount of liquidity held by the position\n   * with the given slippage tolerance\n   * @param slippageTolerance Tolerance of unfavorable slippage from the current price\n   * @returns The amounts, with slippage\n   */\n  public mintAmountsWithSlippage(\n    slippageTolerance: Percent,\n  ): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    // get lower/upper prices\n    const { sqrtRatioX96Upper, sqrtRatioX96Lower } =\n      this.ratiosAfterSlippage(slippageTolerance);\n\n    // construct counterfactual pools\n    const poolLower = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Lower,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Lower),\n    );\n    const poolUpper = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Upper,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Upper),\n    );\n\n    // because the router is imprecise, we need to calculate the position that will be created (assuming no slippage)\n    const positionThatWillBeCreated = Position.fromAmounts({\n      pool: this.pool,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n      ...this.mintAmounts, // the mint amounts are what will be passed as calldata\n      useFullPrecision: false,\n    });\n\n    // we want the smaller amounts...\n    // ...which occurs at the upper price for amount0...\n    const { amount0 } = new Position({\n      pool: poolUpper,\n      liquidity: positionThatWillBeCreated.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n    }).mintAmounts;\n    // ...and the lower for amount1\n    const { amount1 } = new Position({\n      pool: poolLower,\n      liquidity: positionThatWillBeCreated.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n    }).mintAmounts;\n\n    return { amount0, amount1 };\n  }\n\n  /**\n   * Returns the minimum amounts that should be requested in order to safely burn the amount of liquidity held by the\n   * position with the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the current price\n   * @returns The amounts, with slippage\n   */\n  public burnAmountsWithSlippage(\n    slippageTolerance: Percent,\n  ): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    // get lower/upper prices\n    const { sqrtRatioX96Upper, sqrtRatioX96Lower } =\n      this.ratiosAfterSlippage(slippageTolerance);\n\n    // construct counterfactual pools\n    const poolLower = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Lower,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Lower),\n    );\n    const poolUpper = new Pool(\n      this.pool.token0,\n      this.pool.token1,\n      this.pool.fee,\n      sqrtRatioX96Upper,\n      0 /* liquidity doesn't matter */,\n      TickMath.getTickAtSqrtRatio(sqrtRatioX96Upper),\n    );\n\n    // we want the smaller amounts...\n    // ...which occurs at the upper price for amount0...\n    const amount0 = new Position({\n      pool: poolUpper,\n      liquidity: this.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n    }).amount0;\n    // ...and the lower for amount1\n    const amount1 = new Position({\n      pool: poolLower,\n      liquidity: this.liquidity,\n      tickLower: this.tickLower,\n      tickUpper: this.tickUpper,\n    }).amount1;\n\n    return { amount0: amount0.quotient, amount1: amount1.quotient };\n  }\n\n  /**\n   * Returns the minimum amounts that must be sent in order to mint the amount of liquidity held by the position at\n   * the current price for the pool\n   */\n  public get mintAmounts(): Readonly<{ amount0: JSBI; amount1: JSBI }> {\n    if (this._mintAmounts === null) {\n      if (this.pool.tickCurrent < this.tickLower) {\n        return {\n          amount0: SqrtPriceMath.getAmount0Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true,\n          ),\n          amount1: ZERO,\n        };\n      } else if (this.pool.tickCurrent < this.tickUpper) {\n        return {\n          amount0: SqrtPriceMath.getAmount0Delta(\n            this.pool.sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true,\n          ),\n          amount1: SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            this.pool.sqrtRatioX96,\n            this.liquidity,\n            true,\n          ),\n        };\n      } else {\n        return {\n          amount0: ZERO,\n          amount1: SqrtPriceMath.getAmount1Delta(\n            TickMath.getSqrtRatioAtTick(this.tickLower),\n            TickMath.getSqrtRatioAtTick(this.tickUpper),\n            this.liquidity,\n            true,\n          ),\n        };\n      }\n    }\n    return this._mintAmounts;\n  }\n\n  /**\n   * Computes the maximum amount of liquidity received for a given amount of token0, token1,\n   * and the prices at the tick boundaries.\n   * @param pool The pool for which the position should be created\n   * @param tickLower The lower tick of the position\n   * @param tickUpper The upper tick of the position\n   * @param amount0 token0 amount\n   * @param amount1 token1 amount\n   * @param useFullPrecision If false, liquidity will be maximized according to what the router can calculate,\n   * not what core can theoretically support\n   * @returns The amount of liquidity for the position\n   */\n  public static fromAmounts({\n    pool,\n    tickLower,\n    tickUpper,\n    amount0,\n    amount1,\n    useFullPrecision,\n  }: {\n    pool: Pool;\n    tickLower: number;\n    tickUpper: number;\n    amount0: BigintIsh;\n    amount1: BigintIsh;\n    useFullPrecision: boolean;\n  }) {\n    const sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(tickLower);\n    const sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(tickUpper);\n    return new Position({\n      pool,\n      tickLower,\n      tickUpper,\n      liquidity: maxLiquidityForAmounts(\n        pool.sqrtRatioX96,\n        sqrtRatioAX96,\n        sqrtRatioBX96,\n        amount0,\n        amount1,\n        useFullPrecision,\n      ),\n    });\n  }\n\n  /**\n   * Computes a position with the maximum amount of liquidity received for a given amount of token0, assuming an unlimited amount of token1\n   * @param pool The pool for which the position is created\n   * @param tickLower The lower tick\n   * @param tickUpper The upper tick\n   * @param amount0 The desired amount of token0\n   * @param useFullPrecision If true, liquidity will be maximized according to what the router can calculate,\n   * not what core can theoretically support\n   * @returns The position\n   */\n  public static fromAmount0({\n    pool,\n    tickLower,\n    tickUpper,\n    amount0,\n    useFullPrecision,\n  }: {\n    pool: Pool;\n    tickLower: number;\n    tickUpper: number;\n    amount0: BigintIsh;\n    useFullPrecision: boolean;\n  }) {\n    return Position.fromAmounts({\n      pool,\n      tickLower,\n      tickUpper,\n      amount0,\n      amount1: MaxUint256,\n      useFullPrecision,\n    });\n  }\n\n  /**\n   * Computes a position with the maximum amount of liquidity received for a given amount of token1, assuming an unlimited amount of token0\n   * @param pool The pool for which the position is created\n   * @param tickLower The lower tick\n   * @param tickUpper The upper tick\n   * @param amount1 The desired amount of token1\n   * @returns The position\n   */\n  public static fromAmount1({\n    pool,\n    tickLower,\n    tickUpper,\n    amount1,\n  }: {\n    pool: Pool;\n    tickLower: number;\n    tickUpper: number;\n    amount1: BigintIsh;\n  }) {\n    // this function always uses full precision,\n    return Position.fromAmounts({\n      pool,\n      tickLower,\n      tickUpper,\n      amount0: MaxUint256,\n      amount1,\n      useFullPrecision: true,\n    });\n  }\n}\n","import invariant from \"tiny-invariant\";\n\nimport { Price } from \"./fractions\";\nimport { Token } from \"./token\";\nimport { Currency } from \"./currency\";\nimport { Pool } from \"./pool\";\n\n/**\n * Represents a list of pools through which a swap can occur\n * @template TInput The input token\n * @template TOutput The output token\n */\nexport class RouteSDK<TInput extends Currency, TOutput extends Currency> {\n  public readonly pools: Pool[];\n  public readonly tokenPath: Token[];\n  public readonly input: TInput;\n  public readonly output: TOutput;\n\n  private _midPrice: Price<TInput, TOutput> | null = null;\n\n  /**\n   * Creates an instance of route.\n   * @param pools An array of `Pool` objects, ordered by the route the swap will take\n   * @param input The input token\n   * @param output The output token\n   */\n  public constructor(pools: Pool[], input: TInput, output: TOutput) {\n    invariant(pools.length > 0, \"POOLS\");\n\n    const wrappedInput = input.wrapped;\n    invariant(pools[0].involvesToken(wrappedInput), \"INPUT\");\n\n    invariant(pools[pools.length - 1].involvesToken(output.wrapped), \"OUTPUT\");\n\n    /**\n     * Normalizes token0-token1 order and selects the next token/fee step to add to the path\n     * */\n    const tokenPath: Token[] = [wrappedInput];\n    for (const [i, pool] of pools.entries()) {\n      const currentInputToken = tokenPath[i];\n      invariant(\n        currentInputToken.equals(pool.token0) ||\n          currentInputToken.equals(pool.token1),\n        \"PATH\",\n      );\n      const nextToken = currentInputToken.equals(pool.token0)\n        ? pool.token1\n        : pool.token0;\n      tokenPath.push(nextToken);\n    }\n\n    this.pools = pools;\n    this.tokenPath = tokenPath;\n    this.input = input;\n    this.output = output ?? tokenPath[tokenPath.length - 1];\n  }\n\n  /**\n   * Returns the mid price of the route\n   */\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice;\n\n    const price = this.pools.slice(1).reduce(\n      ({ nextInput, price }, pool) => {\n        return nextInput.equals(pool.token0)\n          ? {\n              nextInput: pool.token1,\n              price: price.multiply(pool.token0Price),\n            }\n          : {\n              nextInput: pool.token0,\n              price: price.multiply(pool.token1Price),\n            };\n      },\n      this.pools[0].token0.equals(this.input.wrapped)\n        ? {\n            nextInput: this.pools[0].token1,\n            price: this.pools[0].token0Price,\n          }\n        : {\n            nextInput: this.pools[0].token0,\n            price: this.pools[0].token1Price,\n          },\n    ).price;\n\n    return (this._midPrice = new Price(\n      this.input,\n      this.output,\n      price.denominator,\n      price.numerator,\n    ));\n  }\n}\n\nexport interface IRoute<\n  TInput extends Currency,\n  TOutput extends Currency,\n  TPool extends Pool,\n> {\n  // array of pools if v3 or pairs if v2\n  pools: TPool[];\n  path: Token[];\n  midPrice: Price<TInput, TOutput>;\n  input: TInput;\n  output: TOutput;\n}\n\n// V3 route wrapper\nexport class Route<TInput extends Currency, TOutput extends Currency>\n  extends RouteSDK<TInput, TOutput>\n  implements IRoute<TInput, TOutput, Pool>\n{\n  public readonly path: Token[];\n\n  constructor(v3Route: RouteSDK<TInput, TOutput>) {\n    super(v3Route.pools, v3Route.input, v3Route.output);\n    this.path = v3Route.tokenPath;\n  }\n}\n","import { Currency } from \"./currency\";\nimport { Token } from \"./token\";\nimport { Fraction, Percent, Price, CurrencyAmount } from \"./fractions\";\nimport { TradeType, ONE, ZERO } from \"../constants\";\nimport { Pool } from \"./pool\";\nimport { sortedInsert } from \"../utils\";\nimport invariant from \"tiny-invariant\";\n\nimport { IRoute, Route, RouteSDK } from \"./route\";\n\nconst ONE_HUNDRED_PERCENT = new Percent(100, 100);\nconst ZERO_PERCENT = new Percent(ZERO);\n\n/**\n * Trades comparator, an extension of the input output comparator that also considers other dimensions of the trade in ranking them\n * @template TInput The input token, either Ether or an ERC-20\n * @template TOutput The output token, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n * @param a The first trade to compare\n * @param b The second trade to compare\n * @returns A sorted ordering for two neighboring elements in a trade array\n */\nexport function tradeComparator<\n  TInput extends Currency,\n  TOutput extends Currency,\n  TTradeType extends TradeType,\n>(\n  a: TradeSDK<TInput, TOutput, TTradeType>,\n  b: TradeSDK<TInput, TOutput, TTradeType>,\n) {\n  // must have same input and output token for comparison\n  invariant(\n    a.inputAmount.currency.equals(b.inputAmount.currency),\n    \"INPUT_CURRENCY\",\n  );\n  invariant(\n    a.outputAmount.currency.equals(b.outputAmount.currency),\n    \"OUTPUT_CURRENCY\",\n  );\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      // consider the number of hops since each hop costs gas\n      const aHops = a.swaps.reduce(\n        (total, cur) => total + cur.route.tokenPath.length,\n        0,\n      );\n      const bHops = b.swaps.reduce(\n        (total, cur) => total + cur.route.tokenPath.length,\n        0,\n      );\n      return aHops - bHops;\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number;\n  // the maximum number of hops a trade should contain\n  maxHops?: number;\n}\n\n/**\n * Represents a trade executed against a set of routes where some percentage of the input is\n * split across each route.\n *\n * Each route has its own set of pools. Pools can not be re-used across routes.\n *\n * Does not account for slippage, i.e., changes in price environment that can occur between\n * the time the trade is submitted and when it is executed.\n * @template TInput The input token, either Ether or an ERC-20\n * @template TOutput The output token, either Ether or an ERC-20\n * @template TTradeType The trade type, either exact input or exact output\n */\nexport class TradeSDK<\n  TInput extends Currency,\n  TOutput extends Currency,\n  TTradeType extends TradeType,\n> {\n  /**\n   * @deprecated Deprecated in favor of 'swaps' property. If the trade consists of multiple routes\n   * this will return an error.\n   *\n   * When the trade consists of just a single route, this returns the route of the trade,\n   * i.e. which pools the trade goes through.\n   */\n  public get route(): RouteSDK<TInput, TOutput> {\n    invariant(this.swaps.length == 1, \"MULTIPLE_ROUTES\");\n    return this.swaps[0].route;\n  }\n\n  /**\n   * The swaps of the trade, i.e. which routes and how much is swapped in each that\n   * make up the trade.\n   */\n  public readonly swaps: {\n    route: RouteSDK<TInput, TOutput>;\n    inputAmount: CurrencyAmount<TInput>;\n    outputAmount: CurrencyAmount<TOutput>;\n  }[];\n\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType;\n\n  /**\n   * The cached result of the input amount computation\n   * @private\n   */\n  private _inputAmount: CurrencyAmount<TInput> | undefined;\n\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public get inputAmount(): CurrencyAmount<TInput> {\n    if (this._inputAmount) {\n      return this._inputAmount;\n    }\n\n    const inputCurrency = this.swaps[0].inputAmount.currency;\n    const totalInputFromRoutes = this.swaps\n      .map(({ inputAmount }) => inputAmount)\n      .reduce(\n        (total, cur) => total.add(cur),\n        CurrencyAmount.fromRawAmount(inputCurrency, 0),\n      );\n\n    this._inputAmount = totalInputFromRoutes;\n    return this._inputAmount;\n  }\n\n  /**\n   * The cached result of the output amount computation\n   * @private\n   */\n  private _outputAmount: CurrencyAmount<TOutput> | undefined;\n\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public get outputAmount(): CurrencyAmount<TOutput> {\n    if (this._outputAmount) {\n      return this._outputAmount;\n    }\n\n    const outputCurrency = this.swaps[0].outputAmount.currency;\n    const totalOutputFromRoutes = this.swaps\n      .map(({ outputAmount }) => outputAmount)\n      .reduce(\n        (total, cur) => total.add(cur),\n        CurrencyAmount.fromRawAmount(outputCurrency, 0),\n      );\n\n    this._outputAmount = totalOutputFromRoutes;\n    return this._outputAmount;\n  }\n\n  /**\n   * The cached result of the computed execution price\n   * @private\n   */\n  private _executionPrice: Price<TInput, TOutput> | undefined;\n\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public get executionPrice(): Price<TInput, TOutput> {\n    return (\n      this._executionPrice ??\n      (this._executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient,\n      ))\n    );\n  }\n\n  /**\n   * The cached result of the price impact computation\n   * @private\n   */\n  private _priceImpact: Percent | undefined;\n\n  /**\n   * Returns the percent difference between the route's mid price and the price impact\n   */\n  public get priceImpact(): Percent {\n    if (this._priceImpact) {\n      return this._priceImpact;\n    }\n\n    let spotOutputAmount = CurrencyAmount.fromRawAmount(\n      this.outputAmount.currency,\n      0,\n    );\n    for (const { route, inputAmount } of this.swaps) {\n      const midPrice = route.midPrice;\n      spotOutputAmount = spotOutputAmount.add(midPrice.quote(inputAmount));\n    }\n\n    const priceImpact = spotOutputAmount\n      .subtract(this.outputAmount)\n      .divide(spotOutputAmount);\n    this._priceImpact = new Percent(\n      priceImpact.numerator,\n      priceImpact.denominator,\n    );\n\n    return this._priceImpact;\n  }\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @param route The route of the exact in trade\n   * @param amountIn The amount being passed in\n   * @returns The exact in trade\n   */\n  public static async exactIn<\n    TInput extends Currency,\n    TOutput extends Currency,\n  >(\n    route: RouteSDK<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>,\n  ): Promise<TradeSDK<TInput, TOutput, TradeType.EXACT_INPUT>> {\n    return TradeSDK.fromRoute(route, amountIn, TradeType.EXACT_INPUT);\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @param route The route of the exact out trade\n   * @param amountOut The amount returned by the trade\n   * @returns The exact out trade\n   */\n  public static async exactOut<\n    TInput extends Currency,\n    TOutput extends Currency,\n  >(\n    route: RouteSDK<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>,\n  ): Promise<TradeSDK<TInput, TOutput, TradeType.EXACT_OUTPUT>> {\n    return TradeSDK.fromRoute(route, amountOut, TradeType.EXACT_OUTPUT);\n  }\n\n  /**\n   * Constructs a trade by simulating swaps through the given route\n   * @template TInput The input token, either Ether or an ERC-20.\n   * @template TOutput The output token, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param route route to swap through\n   * @param amount the amount specified, either input or output, depending on tradeType\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The route\n   */\n  public static async fromRoute<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType,\n  >(\n    route: RouteSDK<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT\n      ? CurrencyAmount<TInput>\n      : CurrencyAmount<TOutput>,\n    tradeType: TTradeType,\n  ): Promise<TradeSDK<TInput, TOutput, TTradeType>> {\n    const amounts: CurrencyAmount<Token>[] = new Array(route.tokenPath.length);\n    let inputAmount: CurrencyAmount<TInput>;\n    let outputAmount: CurrencyAmount<TOutput>;\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), \"INPUT\");\n      amounts[0] = amount.wrapped;\n      for (let i = 0; i < route.tokenPath.length - 1; i++) {\n        const pool = route.pools[i];\n        const [outputAmount] = await pool.getOutputAmount(amounts[i]);\n        amounts[i + 1] = outputAmount;\n      }\n      inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        amount.numerator,\n        amount.denominator,\n      );\n      outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        amounts[amounts.length - 1].numerator,\n        amounts[amounts.length - 1].denominator,\n      );\n    } else {\n      invariant(amount.currency.equals(route.output), \"OUTPUT\");\n      amounts[amounts.length - 1] = amount.wrapped;\n      for (let i = route.tokenPath.length - 1; i > 0; i--) {\n        const pool = route.pools[i - 1];\n        const [inputAmount] = await pool.getInputAmount(amounts[i]);\n        amounts[i - 1] = inputAmount;\n      }\n      inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        amounts[0].numerator,\n        amounts[0].denominator,\n      );\n      outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        amount.numerator,\n        amount.denominator,\n      );\n    }\n\n    return new TradeSDK({\n      routes: [{ inputAmount, outputAmount, route }],\n      tradeType,\n    });\n  }\n\n  /**\n   * Constructs a trade from routes by simulating swaps\n   *\n   * @template TInput The input token, either Ether or an ERC-20.\n   * @template TOutput The output token, either Ether or an ERC-20.\n   * @template TTradeType The type of the trade, either exact in or exact out.\n   * @param routes the routes to swap through and how much of the amount should be routed through each\n   * @param tradeType whether the trade is an exact input or exact output swap\n   * @returns The trade\n   */\n  public static async fromRoutes<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType,\n  >(\n    routes: {\n      amount: TTradeType extends TradeType.EXACT_INPUT\n        ? CurrencyAmount<TInput>\n        : CurrencyAmount<TOutput>;\n      route: RouteSDK<TInput, TOutput>;\n    }[],\n    tradeType: TTradeType,\n  ): Promise<TradeSDK<TInput, TOutput, TTradeType>> {\n    const populatedRoutes: {\n      route: RouteSDK<TInput, TOutput>;\n      inputAmount: CurrencyAmount<TInput>;\n      outputAmount: CurrencyAmount<TOutput>;\n    }[] = [];\n\n    for (const { route, amount } of routes) {\n      const amounts: CurrencyAmount<Token>[] = new Array(\n        route.tokenPath.length,\n      );\n      let inputAmount: CurrencyAmount<TInput>;\n      let outputAmount: CurrencyAmount<TOutput>;\n\n      if (tradeType === TradeType.EXACT_INPUT) {\n        invariant(amount.currency.equals(route.input), \"INPUT\");\n        inputAmount = CurrencyAmount.fromFractionalAmount(\n          route.input,\n          amount.numerator,\n          amount.denominator,\n        );\n        amounts[0] = CurrencyAmount.fromFractionalAmount(\n          route.input.wrapped,\n          amount.numerator,\n          amount.denominator,\n        );\n\n        for (let i = 0; i < route.tokenPath.length - 1; i++) {\n          const pool = route.pools[i];\n          const [outputAmount] = await pool.getOutputAmount(amounts[i]);\n          amounts[i + 1] = outputAmount;\n        }\n\n        outputAmount = CurrencyAmount.fromFractionalAmount(\n          route.output,\n          amounts[amounts.length - 1].numerator,\n          amounts[amounts.length - 1].denominator,\n        );\n      } else {\n        invariant(amount.currency.equals(route.output), \"OUTPUT\");\n        outputAmount = CurrencyAmount.fromFractionalAmount(\n          route.output,\n          amount.numerator,\n          amount.denominator,\n        );\n        amounts[amounts.length - 1] = CurrencyAmount.fromFractionalAmount(\n          route.output.wrapped,\n          amount.numerator,\n          amount.denominator,\n        );\n\n        for (let i = route.tokenPath.length - 1; i > 0; i--) {\n          const pool = route.pools[i - 1];\n          const [inputAmount] = await pool.getInputAmount(amounts[i]);\n          amounts[i - 1] = inputAmount;\n        }\n\n        inputAmount = CurrencyAmount.fromFractionalAmount(\n          route.input,\n          amounts[0].numerator,\n          amounts[0].denominator,\n        );\n      }\n\n      populatedRoutes.push({ route, inputAmount, outputAmount });\n    }\n\n    return new TradeSDK({\n      routes: populatedRoutes,\n      tradeType,\n    });\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the route. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTrade<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType,\n  >(constructorArguments: {\n    route: RouteSDK<TInput, TOutput>;\n    inputAmount: CurrencyAmount<TInput>;\n    outputAmount: CurrencyAmount<TOutput>;\n    tradeType: TTradeType;\n  }): TradeSDK<TInput, TOutput, TTradeType> {\n    return new TradeSDK({\n      ...constructorArguments,\n      routes: [\n        {\n          inputAmount: constructorArguments.inputAmount,\n          outputAmount: constructorArguments.outputAmount,\n          route: constructorArguments.route,\n        },\n      ],\n    });\n  }\n\n  /**\n   * Creates a trade without computing the result of swapping through the routes. Useful when you have simulated the trade\n   * elsewhere and do not have any tick data\n   * @template TInput The input token, either Ether or an ERC-20\n   * @template TOutput The output token, either Ether or an ERC-20\n   * @template TTradeType The type of the trade, either exact in or exact out\n   * @param constructorArguments The arguments passed to the trade constructor\n   * @returns The unchecked trade\n   */\n  public static createUncheckedTradeWithMultipleRoutes<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType,\n  >(constructorArguments: {\n    routes: {\n      route: RouteSDK<TInput, TOutput>;\n      inputAmount: CurrencyAmount<TInput>;\n      outputAmount: CurrencyAmount<TOutput>;\n    }[];\n    tradeType: TTradeType;\n  }): TradeSDK<TInput, TOutput, TTradeType> {\n    return new TradeSDK(constructorArguments);\n  }\n\n  /**\n   * Construct a trade by passing in the pre-computed property values\n   * @param routes The routes through which the trade occurs\n   * @param tradeType The type of trade, exact input or exact output\n   */\n  private constructor({\n    routes,\n    tradeType,\n  }: {\n    routes: {\n      route: RouteSDK<TInput, TOutput>;\n      inputAmount: CurrencyAmount<TInput>;\n      outputAmount: CurrencyAmount<TOutput>;\n    }[];\n    tradeType: TTradeType;\n  }) {\n    const inputCurrency = routes[0].inputAmount.currency;\n    const outputCurrency = routes[0].outputAmount.currency;\n    invariant(\n      routes.every(({ route }) =>\n        inputCurrency.wrapped.equals(route.input.wrapped),\n      ),\n      \"INPUT_CURRENCY_MATCH\",\n    );\n    invariant(\n      routes.every(({ route }) =>\n        outputCurrency.wrapped.equals(route.output.wrapped),\n      ),\n      \"OUTPUT_CURRENCY_MATCH\",\n    );\n\n    const numPools = routes\n      .map(({ route }) => route.pools.length)\n      .reduce((total, cur) => total + cur, 0);\n    const poolAddressSet = new Set<string>();\n    for (const { route } of routes) {\n      for (const pool of route.pools) {\n        poolAddressSet.add(Pool.getAddress(pool.token0, pool.token1, pool.fee));\n      }\n    }\n\n    invariant(numPools == poolAddressSet.size, \"POOLS_DUPLICATED\");\n\n    this.swaps = routes;\n    this.tradeType = tradeType;\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount out\n   */\n  public minimumAmountOut(\n    slippageTolerance: Percent,\n    amountOut = this.outputAmount,\n  ): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), \"SLIPPAGE_TOLERANCE\");\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return amountOut;\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(amountOut.quotient).quotient;\n      return CurrencyAmount.fromRawAmount(\n        amountOut.currency,\n        slippageAdjustedAmountOut,\n      );\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount in\n   */\n  public maximumAmountIn(\n    slippageTolerance: Percent,\n    amountIn = this.inputAmount,\n  ): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), \"SLIPPAGE_TOLERANCE\");\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return amountIn;\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(amountIn.quotient).quotient;\n      return CurrencyAmount.fromRawAmount(\n        amountIn.currency,\n        slippageAdjustedAmountIn,\n      );\n    }\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   * @returns The execution price\n   */\n  public worstExecutionPrice(\n    slippageTolerance: Percent,\n  ): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient,\n    );\n  }\n\n  /**\n   * Given a list of pools, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact in trade\n   */\n  public static async bestTradeExactIn<\n    TInput extends Currency,\n    TOutput extends Currency,\n  >(\n    pools: Pool[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: TradeSDK<TInput, TOutput, TradeType.EXACT_INPUT>[] = [],\n  ): Promise<TradeSDK<TInput, TOutput, TradeType.EXACT_INPUT>[]> {\n    invariant(pools.length > 0, \"POOLS\");\n    invariant(maxHops > 0, \"MAX_HOPS\");\n    invariant(\n      currencyAmountIn === nextAmountIn || currentPools.length > 0,\n      \"INVALID_RECURSION\",\n    );\n\n    const amountIn = nextAmountIn.wrapped;\n    const tokenOut = currencyOut.wrapped;\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i];\n      // pool irrelevant\n      if (\n        !pool.token0.equals(amountIn.currency) &&\n        !pool.token1.equals(amountIn.currency)\n      )\n        continue;\n\n      let amountOut: CurrencyAmount<Token>;\n      try {\n        [amountOut] = await pool.getOutputAmount(amountIn);\n      } catch (error) {\n        // input too low\n        if ((error as any)?.isInsufficientInputAmountError) {\n          continue;\n        }\n        throw error;\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.isToken && amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          await TradeSDK.fromRoute(\n            new RouteSDK(\n              [...currentPools, pool],\n              currencyAmountIn.currency,\n              currencyOut,\n            ),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT,\n          ),\n          maxNumResults,\n          tradeComparator,\n        );\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools\n          .slice(0, i)\n          .concat(pools.slice(i + 1, pools.length));\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        await TradeSDK.bestTradeExactIn(\n          poolsExcludingThisPool,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [...currentPools, pool],\n          amountOut,\n          bestTrades,\n        );\n      }\n    }\n\n    return bestTrades;\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pools, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pools the pools to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the desired currency amount out\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pool\n   * @param currentPools used in recursion; the current list of pools\n   * @param bestTrades used in recursion; the current list of best trades\n   * @returns The exact out trade\n   */\n  public static async bestTradeExactOut<\n    TInput extends Currency,\n    TOutput extends Currency,\n  >(\n    pools: Pool[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPools: Pool[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: TradeSDK<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = [],\n  ): Promise<TradeSDK<TInput, TOutput, TradeType.EXACT_OUTPUT>[]> {\n    invariant(pools.length > 0, \"POOLS\");\n    invariant(maxHops > 0, \"MAX_HOPS\");\n    invariant(\n      currencyAmountOut === nextAmountOut || currentPools.length > 0,\n      \"INVALID_RECURSION\",\n    );\n\n    const amountOut = nextAmountOut.wrapped;\n    const tokenIn = currencyIn.wrapped;\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i];\n      // pool irrelevant\n      if (\n        !pool.token0.equals(amountOut.currency) &&\n        !pool.token1.equals(amountOut.currency)\n      )\n        continue;\n\n      let amountIn: CurrencyAmount<Token>;\n      try {\n        [amountIn] = await pool.getInputAmount(amountOut);\n      } catch (error) {\n        // not enough liquidity in this pool\n        if ((error as any)?.isInsufficientReservesError) {\n          continue;\n        }\n        throw error;\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          await TradeSDK.fromRoute(\n            new RouteSDK(\n              [pool, ...currentPools],\n              currencyIn,\n              currencyAmountOut.currency,\n            ),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT,\n          ),\n          maxNumResults,\n          tradeComparator,\n        );\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThisPool = pools\n          .slice(0, i)\n          .concat(pools.slice(i + 1, pools.length));\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        await TradeSDK.bestTradeExactOut(\n          poolsExcludingThisPool,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1,\n          },\n          [pool, ...currentPools],\n          amountIn,\n          bestTrades,\n        );\n      }\n    }\n\n    return bestTrades;\n  }\n}\n\nexport class Trade<\n  TInput extends Currency,\n  TOutput extends Currency,\n  TTradeType extends TradeType,\n> {\n  public readonly routes: IRoute<TInput, TOutput, Pool>[];\n  public readonly tradeType: TTradeType;\n  private _outputAmount: CurrencyAmount<TOutput> | undefined;\n  private _inputAmount: CurrencyAmount<TInput> | undefined;\n\n  /**\n   * The swaps of the trade, i.e. which routes and how much is swapped in each that\n   * make up the trade. May consist of swaps in v2 or v3.\n   */\n  public readonly swaps: {\n    route: IRoute<TInput, TOutput, Pool>;\n    inputAmount: CurrencyAmount<TInput>;\n    outputAmount: CurrencyAmount<TOutput>;\n  }[];\n\n  //  construct a trade across v2 and v3 routes from pre-computed amounts\n  public constructor({\n    v3Routes,\n    tradeType,\n  }: {\n    v3Routes: {\n      routev3: RouteSDK<TInput, TOutput>;\n      inputAmount: CurrencyAmount<TInput>;\n      outputAmount: CurrencyAmount<TOutput>;\n    }[];\n    tradeType: TTradeType;\n  }) {\n    this.swaps = [];\n    this.routes = [];\n\n    // wrap v3 routes\n    for (const { routev3, inputAmount, outputAmount } of v3Routes) {\n      const route = new Route(routev3);\n      this.routes.push(route);\n      this.swaps.push({\n        route,\n        inputAmount,\n        outputAmount,\n      });\n    }\n\n    if (this.swaps.length === 0) {\n      throw new Error(\"No routes provided when calling Trade constructor\");\n    }\n\n    this.tradeType = tradeType;\n\n    // each route must have the same input and output currency\n    const inputCurrency = this.swaps[0].inputAmount.currency;\n    const outputCurrency = this.swaps[0].outputAmount.currency;\n    invariant(\n      this.swaps.every(({ route }) =>\n        inputCurrency.wrapped.equals(route.input.wrapped),\n      ),\n      \"INPUT_CURRENCY_MATCH\",\n    );\n    invariant(\n      this.swaps.every(({ route }) =>\n        outputCurrency.wrapped.equals(route.output.wrapped),\n      ),\n      \"OUTPUT_CURRENCY_MATCH\",\n    );\n\n    // pools must be unique inter protocols\n    const numPools = this.swaps\n      .map(({ route }) => route.pools.length)\n      .reduce((total, cur) => total + cur, 0);\n    const poolAddressSet = new Set<string>();\n    for (const { route } of this.swaps) {\n      for (const pool of route.pools) {\n        if (pool instanceof Pool) {\n          poolAddressSet.add(\n            Pool.getAddress(pool.token0, pool.token1, (pool as Pool).fee),\n          );\n        } else {\n          throw new Error(\n            \"Unexpected pool type in route when constructing trade object\",\n          );\n        }\n      }\n    }\n    invariant(numPools == poolAddressSet.size, \"POOLS_DUPLICATED\");\n  }\n\n  public get inputAmount(): CurrencyAmount<TInput> {\n    if (this._inputAmount) {\n      return this._inputAmount;\n    }\n\n    const inputCurrency = this.swaps[0].inputAmount.currency;\n    const totalInputFromRoutes = this.swaps\n      .map(({ inputAmount }) => inputAmount)\n      .reduce(\n        (total, cur) => total.add(cur),\n        CurrencyAmount.fromRawAmount(inputCurrency, 0),\n      );\n\n    this._inputAmount = totalInputFromRoutes;\n    return this._inputAmount;\n  }\n\n  public get outputAmount(): CurrencyAmount<TOutput> {\n    if (this._outputAmount) {\n      return this._outputAmount;\n    }\n\n    const outputCurrency = this.swaps[0].outputAmount.currency;\n    const totalOutputFromRoutes = this.swaps\n      .map(({ outputAmount }) => outputAmount)\n      .reduce(\n        (total, cur) => total.add(cur),\n        CurrencyAmount.fromRawAmount(outputCurrency, 0),\n      );\n\n    this._outputAmount = totalOutputFromRoutes;\n    return this._outputAmount;\n  }\n\n  private _executionPrice: Price<TInput, TOutput> | undefined;\n\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public get executionPrice(): Price<TInput, TOutput> {\n    return (\n      this._executionPrice ??\n      (this._executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient,\n      ))\n    );\n  }\n\n  /**\n   * Returns the sell tax of the input token\n   */\n  public get inputTax(): Percent {\n    const inputCurrency = this.inputAmount.currency;\n    if (inputCurrency.isNative || !inputCurrency.wrapped.sellFeeBps)\n      return ZERO_PERCENT;\n\n    return new Percent(inputCurrency.wrapped.sellFeeBps.toNumber(), 10000);\n  }\n\n  /**\n   * Returns the buy tax of the output token\n   */\n  public get outputTax(): Percent {\n    const outputCurrency = this.outputAmount.currency;\n    if (outputCurrency.isNative || !outputCurrency.wrapped.buyFeeBps)\n      return ZERO_PERCENT;\n\n    return new Percent(outputCurrency.wrapped.buyFeeBps.toNumber(), 10000);\n  }\n\n  /**\n   * The cached result of the price impact computation\n   * @private\n   */\n  private _priceImpact: Percent | undefined;\n  /**\n   * Returns the percent difference between the route's mid price and the expected execution price\n   * In order to exclude token taxes from the price impact calculation, the spot price is calculated\n   * using a ratio of values that go into the pools, which are the post-tax input amount and pre-tax output amount.\n   */\n  public get priceImpact(): Percent {\n    if (this._priceImpact) {\n      return this._priceImpact;\n    }\n\n    // returns 0% price impact even though this may be inaccurate as a swap may have occured.\n    // because we're unable to derive the pre-buy-tax amount, use 0% as a placeholder.\n    if (this.outputTax.equalTo(ONE_HUNDRED_PERCENT)) return ZERO_PERCENT;\n\n    let spotOutputAmount = CurrencyAmount.fromRawAmount(\n      this.outputAmount.currency,\n      0,\n    );\n    for (const { route, inputAmount } of this.swaps) {\n      const midPrice = route.midPrice;\n      const postTaxInputAmount = inputAmount.multiply(\n        new Fraction(ONE).subtract(this.inputTax),\n      );\n      spotOutputAmount = spotOutputAmount.add(\n        midPrice.quote(postTaxInputAmount),\n      );\n    }\n\n    // if the total output of this trade is 0, then most likely the post-tax input was also 0, and therefore this swap\n    // does not move the pools' market price\n    if (spotOutputAmount.equalTo(ZERO)) return ZERO_PERCENT;\n\n    const preTaxOutputAmount = this.outputAmount.divide(\n      new Fraction(ONE).subtract(this.outputTax),\n    );\n    const priceImpact = spotOutputAmount\n      .subtract(preTaxOutputAmount)\n      .divide(spotOutputAmount);\n    this._priceImpact = new Percent(\n      priceImpact.numerator,\n      priceImpact.denominator,\n    );\n\n    return this._priceImpact;\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount out\n   */\n  public minimumAmountOut(\n    slippageTolerance: Percent,\n    amountOut = this.outputAmount,\n  ): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), \"SLIPPAGE_TOLERANCE\");\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return amountOut;\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(amountOut.quotient).quotient;\n      return CurrencyAmount.fromRawAmount(\n        amountOut.currency,\n        slippageAdjustedAmountOut,\n      );\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount in\n   */\n  public maximumAmountIn(\n    slippageTolerance: Percent,\n    amountIn = this.inputAmount,\n  ): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), \"SLIPPAGE_TOLERANCE\");\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return amountIn;\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE)\n        .add(slippageTolerance)\n        .multiply(amountIn.quotient).quotient;\n      return CurrencyAmount.fromRawAmount(\n        amountIn.currency,\n        slippageAdjustedAmountIn,\n      );\n    }\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   * @returns The execution price\n   */\n  public worstExecutionPrice(\n    slippageTolerance: Percent,\n  ): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient,\n    );\n  }\n\n  public static async fromRoutes<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType,\n  >(\n    v3Routes: {\n      routev3: RouteSDK<TInput, TOutput>;\n      amount: TTradeType extends TradeType.EXACT_INPUT\n        ? CurrencyAmount<TInput>\n        : CurrencyAmount<TOutput>;\n    }[],\n    tradeType: TTradeType,\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    const populatedV3Routes: {\n      routev3: RouteSDK<TInput, TOutput>;\n      inputAmount: CurrencyAmount<TInput>;\n      outputAmount: CurrencyAmount<TOutput>;\n    }[] = [];\n\n    for (const { routev3, amount } of v3Routes) {\n      const v3Trade = await TradeSDK.fromRoute(routev3, amount, tradeType);\n      const { inputAmount, outputAmount } = v3Trade;\n\n      populatedV3Routes.push({\n        routev3,\n        inputAmount,\n        outputAmount,\n      });\n    }\n\n    return new Trade({\n      v3Routes: populatedV3Routes,\n      tradeType,\n    });\n  }\n\n  public static async fromRoute<\n    TInput extends Currency,\n    TOutput extends Currency,\n    TTradeType extends TradeType,\n  >(\n    route: RouteSDK<TInput, TOutput>,\n\n    amount: TTradeType extends TradeType.EXACT_INPUT\n      ? CurrencyAmount<TInput>\n      : CurrencyAmount<TOutput>,\n    tradeType: TTradeType,\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n    let v3Routes: {\n      routev3: RouteSDK<TInput, TOutput>;\n      inputAmount: CurrencyAmount<TInput>;\n      outputAmount: CurrencyAmount<TOutput>;\n    }[] = [];\n\n    if (route instanceof RouteSDK) {\n      const v3Trade = await TradeSDK.fromRoute(route, amount, tradeType);\n      const { inputAmount, outputAmount } = v3Trade;\n      v3Routes = [{ routev3: route, inputAmount, outputAmount }];\n    } else {\n      throw new Error(\"Invalid route type\");\n    }\n\n    return new Trade({\n      v3Routes,\n      tradeType,\n    });\n  }\n}\n","export enum Protocol {\n  V2 = \"V2\",\n  V3 = \"V3\",\n  MIXED = \"MIXED\",\n}\n","import invariant from \"tiny-invariant\";\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(\n  items: T[],\n  add: T,\n  maxSize: number,\n  comparator: (a: T, b: T) => number,\n): T | null {\n  invariant(maxSize > 0, \"MAX_SIZE_ZERO\");\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, \"ITEMS_SIZE\");\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add);\n    return null;\n  } else {\n    const isFull = items.length === maxSize;\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add;\n    }\n\n    let lo = 0,\n      hi = items.length;\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1;\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n    items.splice(lo, 0, add);\n    return isFull ? items.pop()! : null;\n  }\n}\n","import JSBI from \"jsbi\";\nimport invariant from \"tiny-invariant\";\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER);\n\nconst ZERO = JSBI.BigInt(0);\nconst ONE = JSBI.BigInt(1);\nconst TWO = JSBI.BigInt(2);\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), \"NEGATIVE\");\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))));\n  }\n\n  let z: JSBI;\n  let x: JSBI;\n  z = value;\n  x = JSBI.add(JSBI.divide(value, TWO), ONE);\n  while (JSBI.lessThan(x, z)) {\n    z = x;\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO);\n  }\n  return z;\n}\n","import { getAddress } from \"@ethersproject/address\";\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address);\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`);\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/;\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address;\n  }\n\n  throw new Error(`${address} is not a valid address.`);\n}\n","import { defaultAbiCoder } from \"@ethersproject/abi\";\nimport { getCreate2Address } from \"@ethersproject/address\";\nimport { keccak256 } from \"@ethersproject/solidity\";\nimport { Token } from \"../entities\";\nimport { FeeAmount, POOL_INIT_CODE_HASH } from \"../constants\";\n\n/**\n * Computes a pool address\n * @param factoryAddress The Uniswap V3 factory address\n * @param tokenA The first token of the pair, irrespective of sort order\n * @param tokenB The second token of the pair, irrespective of sort order\n * @param fee The fee tier of the pool\n * @param initCodeHashManualOverride Override the init code hash used to compute the pool address if necessary\n * @returns The pool address\n */\nexport function computePoolAddress({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  fee,\n  initCodeHashManualOverride,\n}: {\n  factoryAddress: string;\n  tokenA: Token;\n  tokenB: Token;\n  fee: FeeAmount;\n  initCodeHashManualOverride?: string;\n}): string {\n  const [token0, token1] = tokenA.sortsBefore(tokenB)\n    ? [tokenA, tokenB]\n    : [tokenB, tokenA]; // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(\n      [\"bytes\"],\n      [\n        defaultAbiCoder.encode(\n          [\"address\", \"address\", \"uint24\"],\n          [token0.address, token1.address, fee],\n        ),\n      ],\n    ),\n    initCodeHashManualOverride ?? POOL_INIT_CODE_HASH,\n  );\n}\n","import JSBI from \"jsbi\";\nimport { NEGATIVE_ONE, ZERO } from \"../constants\";\n\nexport abstract class LiquidityMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static addDelta(x: JSBI, y: JSBI): JSBI {\n    if (JSBI.lessThan(y, ZERO)) {\n      return JSBI.subtract(x, JSBI.multiply(y, NEGATIVE_ONE));\n    } else {\n      return JSBI.add(x, y);\n    }\n  }\n}\n","import JSBI from \"jsbi\";\nimport { FeeAmount, NEGATIVE_ONE, ZERO } from \"../constants\";\n\nimport { FullMath } from \"./fullMath\";\nimport { SqrtPriceMath } from \"./sqrtPriceMath\";\n\nconst MAX_FEE = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(6));\n\nexport abstract class SwapMath {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static computeSwapStep(\n    sqrtRatioCurrentX96: JSBI,\n    sqrtRatioTargetX96: JSBI,\n    liquidity: JSBI,\n    amountRemaining: JSBI,\n    feePips: FeeAmount,\n  ): [JSBI, JSBI, JSBI, JSBI] {\n    const returnValues: Partial<{\n      sqrtRatioNextX96: JSBI;\n      amountIn: JSBI;\n      amountOut: JSBI;\n      feeAmount: JSBI;\n    }> = {};\n\n    const zeroForOne = JSBI.greaterThanOrEqual(\n      sqrtRatioCurrentX96,\n      sqrtRatioTargetX96,\n    );\n    const exactIn = JSBI.greaterThanOrEqual(amountRemaining, ZERO);\n\n    if (exactIn) {\n      const amountRemainingLessFee = JSBI.divide(\n        JSBI.multiply(\n          amountRemaining,\n          JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips)),\n        ),\n        MAX_FEE,\n      );\n      returnValues.amountIn = zeroForOne\n        ? SqrtPriceMath.getAmount0Delta(\n            sqrtRatioTargetX96,\n            sqrtRatioCurrentX96,\n            liquidity,\n            true,\n          )\n        : SqrtPriceMath.getAmount1Delta(\n            sqrtRatioCurrentX96,\n            sqrtRatioTargetX96,\n            liquidity,\n            true,\n          );\n      if (\n        JSBI.greaterThanOrEqual(amountRemainingLessFee, returnValues.amountIn!)\n      ) {\n        returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96;\n      } else {\n        returnValues.sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\n          sqrtRatioCurrentX96,\n          liquidity,\n          amountRemainingLessFee,\n          zeroForOne,\n        );\n      }\n    } else {\n      returnValues.amountOut = zeroForOne\n        ? SqrtPriceMath.getAmount1Delta(\n            sqrtRatioTargetX96,\n            sqrtRatioCurrentX96,\n            liquidity,\n            false,\n          )\n        : SqrtPriceMath.getAmount0Delta(\n            sqrtRatioCurrentX96,\n            sqrtRatioTargetX96,\n            liquidity,\n            false,\n          );\n      if (\n        JSBI.greaterThanOrEqual(\n          JSBI.multiply(amountRemaining, NEGATIVE_ONE),\n          returnValues.amountOut,\n        )\n      ) {\n        returnValues.sqrtRatioNextX96 = sqrtRatioTargetX96;\n      } else {\n        returnValues.sqrtRatioNextX96 =\n          SqrtPriceMath.getNextSqrtPriceFromOutput(\n            sqrtRatioCurrentX96,\n            liquidity,\n            JSBI.multiply(amountRemaining, NEGATIVE_ONE),\n            zeroForOne,\n          );\n      }\n    }\n\n    const max = JSBI.equal(sqrtRatioTargetX96, returnValues.sqrtRatioNextX96);\n\n    if (zeroForOne) {\n      returnValues.amountIn =\n        max && exactIn\n          ? returnValues.amountIn\n          : SqrtPriceMath.getAmount0Delta(\n              returnValues.sqrtRatioNextX96,\n              sqrtRatioCurrentX96,\n              liquidity,\n              true,\n            );\n      returnValues.amountOut =\n        max && !exactIn\n          ? returnValues.amountOut\n          : SqrtPriceMath.getAmount1Delta(\n              returnValues.sqrtRatioNextX96,\n              sqrtRatioCurrentX96,\n              liquidity,\n              false,\n            );\n    } else {\n      returnValues.amountIn =\n        max && exactIn\n          ? returnValues.amountIn\n          : SqrtPriceMath.getAmount1Delta(\n              sqrtRatioCurrentX96,\n              returnValues.sqrtRatioNextX96,\n              liquidity,\n              true,\n            );\n      returnValues.amountOut =\n        max && !exactIn\n          ? returnValues.amountOut\n          : SqrtPriceMath.getAmount0Delta(\n              sqrtRatioCurrentX96,\n              returnValues.sqrtRatioNextX96,\n              liquidity,\n              false,\n            );\n    }\n\n    if (\n      !exactIn &&\n      JSBI.greaterThan(\n        returnValues.amountOut!,\n        JSBI.multiply(amountRemaining, NEGATIVE_ONE),\n      )\n    ) {\n      returnValues.amountOut = JSBI.multiply(amountRemaining, NEGATIVE_ONE);\n    }\n\n    if (\n      exactIn &&\n      JSBI.notEqual(returnValues.sqrtRatioNextX96, sqrtRatioTargetX96)\n    ) {\n      // we didn't reach the target, so take the remainder of the maximum input as fee\n      returnValues.feeAmount = JSBI.subtract(\n        amountRemaining,\n        returnValues.amountIn!,\n      );\n    } else {\n      returnValues.feeAmount = FullMath.mulDivRoundingUp(\n        returnValues.amountIn!,\n        JSBI.BigInt(feePips),\n        JSBI.subtract(MAX_FEE, JSBI.BigInt(feePips)),\n      );\n    }\n\n    return [\n      returnValues.sqrtRatioNextX96!,\n      returnValues.amountIn!,\n      returnValues.amountOut!,\n      returnValues.feeAmount!,\n    ];\n  }\n}\n","/**\n * Determines if a tick list is sorted\n * @param list The tick list\n * @param comparator The comparator\n * @returns true if sorted\n */\nexport function isSorted<T>(\n  list: Array<T>,\n  comparator: (a: T, b: T) => number,\n): boolean {\n  for (let i = 0; i < list.length - 1; i++) {\n    if (comparator(list[i], list[i + 1]) > 0) {\n      return false;\n    }\n  }\n  return true;\n}\n","import JSBI from \"jsbi\";\nimport invariant from \"tiny-invariant\";\nimport { Tick } from \"../entities/tick\";\nimport { ZERO } from \"../constants\";\nimport { isSorted } from \"./isSorted\";\n\nfunction tickComparator(a: Tick, b: Tick) {\n  return a.index - b.index;\n}\n\n/**\n * Utility methods for interacting with sorted lists of ticks\n */\nexport abstract class TickList {\n  /**\n   * Cannot be constructed\n   */\n  private constructor() {}\n\n  public static validateList(ticks: Tick[], tickSpacing: number) {\n    invariant(tickSpacing > 0, \"TICK_SPACING_NONZERO\");\n    // ensure ticks are spaced appropriately\n    invariant(\n      ticks.every(({ index }) => index % tickSpacing === 0),\n      \"TICK_SPACING\",\n    );\n\n    // ensure tick liquidity deltas sum to 0\n    invariant(\n      JSBI.equal(\n        ticks.reduce(\n          (accumulator, { liquidityNet }) =>\n            JSBI.add(accumulator, liquidityNet),\n          ZERO,\n        ),\n        ZERO,\n      ),\n      \"ZERO_NET\",\n    );\n\n    invariant(isSorted(ticks, tickComparator), \"SORTED\");\n  }\n\n  public static isBelowSmallest(ticks: readonly Tick[], tick: number): boolean {\n    invariant(ticks.length > 0, \"LENGTH\");\n    return tick < ticks[0].index;\n  }\n\n  public static isAtOrAboveLargest(\n    ticks: readonly Tick[],\n    tick: number,\n  ): boolean {\n    invariant(ticks.length > 0, \"LENGTH\");\n    return tick >= ticks[ticks.length - 1].index;\n  }\n\n  public static getTick(ticks: readonly Tick[], index: number): Tick {\n    const tick = ticks[this.binarySearch(ticks, index)];\n    invariant(tick.index === index, \"NOT_CONTAINED\");\n    return tick;\n  }\n\n  /**\n   * Finds the largest tick in the list of ticks that is less than or equal to tick\n   * @param ticks list of ticks\n   * @param tick tick to find the largest tick that is less than or equal to tick\n   * @private\n   */\n  private static binarySearch(ticks: readonly Tick[], tick: number): number {\n    invariant(!this.isBelowSmallest(ticks, tick), \"BELOW_SMALLEST\");\n\n    let l = 0;\n    let r = ticks.length - 1;\n    let i;\n    while (true) {\n      i = Math.floor((l + r) / 2);\n\n      if (\n        ticks[i].index <= tick &&\n        (i === ticks.length - 1 || ticks[i + 1].index > tick)\n      ) {\n        return i;\n      }\n\n      if (ticks[i].index < tick) {\n        l = i + 1;\n      } else {\n        r = i - 1;\n      }\n    }\n  }\n\n  public static nextInitializedTick(\n    ticks: readonly Tick[],\n    tick: number,\n    lte: boolean,\n  ): Tick {\n    if (lte) {\n      invariant(!TickList.isBelowSmallest(ticks, tick), \"BELOW_SMALLEST\");\n      if (TickList.isAtOrAboveLargest(ticks, tick)) {\n        return ticks[ticks.length - 1];\n      }\n      const index = this.binarySearch(ticks, tick);\n      return ticks[index];\n    } else {\n      invariant(!this.isAtOrAboveLargest(ticks, tick), \"AT_OR_ABOVE_LARGEST\");\n      if (this.isBelowSmallest(ticks, tick)) {\n        return ticks[0];\n      }\n      const index = this.binarySearch(ticks, tick);\n      return ticks[index + 1];\n    }\n  }\n\n  public static nextInitializedTickWithinOneWord(\n    ticks: readonly Tick[],\n    tick: number,\n    lte: boolean,\n    tickSpacing: number,\n  ): [number, boolean] {\n    const compressed = Math.floor(tick / tickSpacing); // matches rounding in the code\n\n    if (lte) {\n      const wordPos = compressed >> 8;\n      const minimum = (wordPos << 8) * tickSpacing;\n\n      if (TickList.isBelowSmallest(ticks, tick)) {\n        return [minimum, false];\n      }\n\n      const index = TickList.nextInitializedTick(ticks, tick, lte).index;\n      const nextInitializedTick = Math.max(minimum, index);\n      return [nextInitializedTick, nextInitializedTick === index];\n    } else {\n      const wordPos = (compressed + 1) >> 8;\n      const maximum = (((wordPos + 1) << 8) - 1) * tickSpacing;\n\n      if (this.isAtOrAboveLargest(ticks, tick)) {\n        return [maximum, false];\n      }\n\n      const index = this.nextInitializedTick(ticks, tick, lte).index;\n      const nextInitializedTick = Math.min(maximum, index);\n      return [nextInitializedTick, nextInitializedTick === index];\n    }\n  }\n}\n","import JSBI from \"jsbi\";\nimport { Q96, BigintIsh } from \"../constants\";\n\n/**\n * Returns an imprecise maximum amount of liquidity received for a given amount of token 0.\n * This function is available to accommodate LiquidityAmounts#getLiquidityForAmount0 in the v3 periphery,\n * which could be more precise by at least 32 bits by dividing by Q64 instead of Q96 in the intermediate step,\n * and shifting the subtracted ratio left by 32 bits. This imprecise calculation will likely be replaced in a future\n * v3 router contract.\n * @param sqrtRatioAX96 The price at the lower boundary\n * @param sqrtRatioBX96 The price at the upper boundary\n * @param amount0 The token0 amount\n * @returns liquidity for amount0, imprecise\n */\nfunction maxLiquidityForAmount0Imprecise(\n  sqrtRatioAX96: JSBI,\n  sqrtRatioBX96: JSBI,\n  amount0: BigintIsh,\n): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\n  }\n  const intermediate = JSBI.divide(\n    JSBI.multiply(sqrtRatioAX96, sqrtRatioBX96),\n    Q96,\n  );\n  return JSBI.divide(\n    JSBI.multiply(JSBI.BigInt(amount0), intermediate),\n    JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96),\n  );\n}\n\n/**\n * Returns a precise maximum amount of liquidity received for a given amount of token 0 by dividing by Q64 instead of Q96 in the intermediate step,\n * and shifting the subtracted ratio left by 32 bits.\n * @param sqrtRatioAX96 The price at the lower boundary\n * @param sqrtRatioBX96 The price at the upper boundary\n * @param amount0 The token0 amount\n * @returns liquidity for amount0, precise\n */\nfunction maxLiquidityForAmount0Precise(\n  sqrtRatioAX96: JSBI,\n  sqrtRatioBX96: JSBI,\n  amount0: BigintIsh,\n): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\n  }\n\n  const numerator = JSBI.multiply(\n    JSBI.multiply(JSBI.BigInt(amount0), sqrtRatioAX96),\n    sqrtRatioBX96,\n  );\n  const denominator = JSBI.multiply(\n    Q96,\n    JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96),\n  );\n\n  return JSBI.divide(numerator, denominator);\n}\n\n/**\n * Computes the maximum amount of liquidity received for a given amount of token1\n * @param sqrtRatioAX96 The price at the lower tick boundary\n * @param sqrtRatioBX96 The price at the upper tick boundary\n * @param amount1 The token1 amount\n * @returns liquidity for amount1\n */\nfunction maxLiquidityForAmount1(\n  sqrtRatioAX96: JSBI,\n  sqrtRatioBX96: JSBI,\n  amount1: BigintIsh,\n): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\n  }\n  return JSBI.divide(\n    JSBI.multiply(JSBI.BigInt(amount1), Q96),\n    JSBI.subtract(sqrtRatioBX96, sqrtRatioAX96),\n  );\n}\n\n/**\n * Computes the maximum amount of liquidity received for a given amount of token0, token1,\n * and the prices at the tick boundaries.\n * @param sqrtRatioCurrentX96 the current price\n * @param sqrtRatioAX96 price at lower boundary\n * @param sqrtRatioBX96 price at upper boundary\n * @param amount0 token0 amount\n * @param amount1 token1 amount\n * @param useFullPrecision if false, liquidity will be maximized according to what the router can calculate,\n * not what core can theoretically support\n */\nexport function maxLiquidityForAmounts(\n  sqrtRatioCurrentX96: JSBI,\n  sqrtRatioAX96: JSBI,\n  sqrtRatioBX96: JSBI,\n  amount0: BigintIsh,\n  amount1: BigintIsh,\n  useFullPrecision: boolean,\n): JSBI {\n  if (JSBI.greaterThan(sqrtRatioAX96, sqrtRatioBX96)) {\n    [sqrtRatioAX96, sqrtRatioBX96] = [sqrtRatioBX96, sqrtRatioAX96];\n  }\n\n  const maxLiquidityForAmount0 = useFullPrecision\n    ? maxLiquidityForAmount0Precise\n    : maxLiquidityForAmount0Imprecise;\n\n  if (JSBI.lessThanOrEqual(sqrtRatioCurrentX96, sqrtRatioAX96)) {\n    return maxLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n  } else if (JSBI.lessThan(sqrtRatioCurrentX96, sqrtRatioBX96)) {\n    const liquidity0 = maxLiquidityForAmount0(\n      sqrtRatioCurrentX96,\n      sqrtRatioBX96,\n      amount0,\n    );\n    const liquidity1 = maxLiquidityForAmount1(\n      sqrtRatioAX96,\n      sqrtRatioCurrentX96,\n      amount1,\n    );\n    return JSBI.lessThan(liquidity0, liquidity1) ? liquidity0 : liquidity1;\n  } else {\n    return maxLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n  }\n}\n","import JSBI from \"jsbi\";\nimport { BigintIsh } from \"../constants\";\nimport { sqrt } from \"./sqrt\";\n\n/**\n * Returns the sqrt ratio as a Q64.96 corresponding to a given ratio of amount1 and amount0\n * @param amount1 The numerator amount i.e., the amount of token1\n * @param amount0 The denominator amount i.e., the amount of token0\n * @returns The sqrt ratio\n */\n\nexport function encodeSqrtRatioX96(\n  amount1: BigintIsh,\n  amount0: BigintIsh,\n): JSBI {\n  const numerator = JSBI.leftShift(JSBI.BigInt(amount1), JSBI.BigInt(192));\n  const denominator = JSBI.BigInt(amount0);\n  const ratioX192 = JSBI.divide(numerator, denominator);\n  return sqrt(ratioX192);\n}\n","import { Price, Token } from \"../entities\";\nimport JSBI from \"jsbi\";\nimport { Q192 } from \"../constants\";\nimport { encodeSqrtRatioX96 } from \"./encodeSqrtRatioX96\";\nimport { TickMath } from \"./tickMath\";\n\n/**\n * Returns a price object corresponding to the input tick and the base/quote token\n * Inputs must be tokens because the address order is used to interpret the price represented by the tick\n * @param baseToken the base token of the price\n * @param quoteToken the quote token of the price\n * @param tick the tick for which to return the price\n */\nexport function tickToPrice(\n  baseToken: Token,\n  quoteToken: Token,\n  tick: number,\n): Price<Token, Token> {\n  const sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\n\n  const ratioX192 = JSBI.multiply(sqrtRatioX96, sqrtRatioX96);\n\n  return baseToken.sortsBefore(quoteToken)\n    ? new Price(baseToken, quoteToken, Q192, ratioX192)\n    : new Price(baseToken, quoteToken, ratioX192, Q192);\n}\n\n/**\n * Returns the first tick for which the given price is greater than or equal to the tick price\n * @param price for which to return the closest tick that represents a price less than or equal to the input price,\n * i.e. the price of the returned tick is less than or equal to the input price\n */\nexport function priceToClosestTick(price: Price<Token, Token>): number {\n  const sorted = price.baseCurrency.sortsBefore(price.quoteCurrency);\n\n  const sqrtRatioX96 = sorted\n    ? encodeSqrtRatioX96(price.numerator, price.denominator)\n    : encodeSqrtRatioX96(price.denominator, price.numerator);\n\n  let tick = TickMath.getTickAtSqrtRatio(sqrtRatioX96);\n  const nextTickPrice = tickToPrice(\n    price.baseCurrency,\n    price.quoteCurrency,\n    tick + 1,\n  );\n  if (sorted) {\n    if (!price.lessThan(nextTickPrice)) {\n      tick++;\n    }\n  } else {\n    if (!price.greaterThan(nextTickPrice)) {\n      tick++;\n    }\n  }\n  return tick;\n}\n","import { pack } from \"@ethersproject/solidity\";\nimport { Currency, Token } from \"../entities\";\nimport { Pool } from \"../entities/pool\";\nimport { RouteSDK } from \"../entities/route\";\n\n/**\n * Converts a route to a hex encoded path\n * @param route the v3 path to convert to an encoded path\n * @param exactOutput whether the route should be encoded in reverse, for making exact output swaps\n */\nexport function encodeRouteToPath(\n  route: RouteSDK<Currency, Currency>,\n  exactOutput: boolean,\n): string {\n  const firstInputToken: Token = route.input.wrapped;\n\n  const { path, types } = route.pools.reduce(\n    (\n      {\n        inputToken,\n        path,\n        types,\n      }: { inputToken: Token; path: (string | number)[]; types: string[] },\n      pool: Pool,\n      index,\n    ): { inputToken: Token; path: (string | number)[]; types: string[] } => {\n      const outputToken: Token = pool.token0.equals(inputToken)\n        ? pool.token1\n        : pool.token0;\n      if (index === 0) {\n        return {\n          inputToken: outputToken,\n          types: [\"address\", \"uint24\", \"address\"],\n          path: [inputToken.address, pool.fee, outputToken.address],\n        };\n      } else {\n        return {\n          inputToken: outputToken,\n          types: [...types, \"uint24\", \"address\"],\n          path: [...path, pool.fee, outputToken.address],\n        };\n      }\n    },\n    { inputToken: firstInputToken, path: [], types: [] },\n  );\n\n  return exactOutput\n    ? pack(types.reverse(), path.reverse())\n    : pack(types, path);\n}\n","import JSBI from \"jsbi\";\nimport { ZERO } from \"../constants\";\n\ninterface FeeGrowthOutside {\n  feeGrowthOutside0X128: JSBI;\n  feeGrowthOutside1X128: JSBI;\n}\n\nconst Q256 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(256));\n\nexport function subIn256(x: JSBI, y: JSBI): JSBI {\n  const difference = JSBI.subtract(x, y);\n\n  if (JSBI.lessThan(difference, ZERO)) {\n    return JSBI.add(Q256, difference);\n  } else {\n    return difference;\n  }\n}\n\nexport abstract class TickLibrary {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static getFeeGrowthInside(\n    feeGrowthOutsideLower: FeeGrowthOutside,\n    feeGrowthOutsideUpper: FeeGrowthOutside,\n    tickLower: number,\n    tickUpper: number,\n    tickCurrent: number,\n    feeGrowthGlobal0X128: JSBI,\n    feeGrowthGlobal1X128: JSBI,\n  ) {\n    let feeGrowthBelow0X128: JSBI;\n    let feeGrowthBelow1X128: JSBI;\n    if (tickCurrent >= tickLower) {\n      feeGrowthBelow0X128 = feeGrowthOutsideLower.feeGrowthOutside0X128;\n      feeGrowthBelow1X128 = feeGrowthOutsideLower.feeGrowthOutside1X128;\n    } else {\n      feeGrowthBelow0X128 = subIn256(\n        feeGrowthGlobal0X128,\n        feeGrowthOutsideLower.feeGrowthOutside0X128,\n      );\n      feeGrowthBelow1X128 = subIn256(\n        feeGrowthGlobal1X128,\n        feeGrowthOutsideLower.feeGrowthOutside1X128,\n      );\n    }\n\n    let feeGrowthAbove0X128: JSBI;\n    let feeGrowthAbove1X128: JSBI;\n    if (tickCurrent < tickUpper) {\n      feeGrowthAbove0X128 = feeGrowthOutsideUpper.feeGrowthOutside0X128;\n      feeGrowthAbove1X128 = feeGrowthOutsideUpper.feeGrowthOutside1X128;\n    } else {\n      feeGrowthAbove0X128 = subIn256(\n        feeGrowthGlobal0X128,\n        feeGrowthOutsideUpper.feeGrowthOutside0X128,\n      );\n      feeGrowthAbove1X128 = subIn256(\n        feeGrowthGlobal1X128,\n        feeGrowthOutsideUpper.feeGrowthOutside1X128,\n      );\n    }\n\n    return [\n      subIn256(\n        subIn256(feeGrowthGlobal0X128, feeGrowthBelow0X128),\n        feeGrowthAbove0X128,\n      ),\n      subIn256(\n        subIn256(feeGrowthGlobal1X128, feeGrowthBelow1X128),\n        feeGrowthAbove1X128,\n      ),\n    ];\n  }\n}\n","import JSBI from \"jsbi\";\nimport { subIn256 } from \"./tickLibrary\";\n\nconst Q128 = JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(128));\n\nexport abstract class PositionLibrary {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // replicates the portions of Position#update required to compute unaccounted fees\n  public static getTokensOwed(\n    feeGrowthInside0LastX128: JSBI,\n    feeGrowthInside1LastX128: JSBI,\n    liquidity: JSBI,\n    feeGrowthInside0X128: JSBI,\n    feeGrowthInside1X128: JSBI,\n  ) {\n    const tokensOwed0 = JSBI.divide(\n      JSBI.multiply(\n        subIn256(feeGrowthInside0X128, feeGrowthInside0LastX128),\n        liquidity,\n      ),\n      Q128,\n    );\n\n    const tokensOwed1 = JSBI.divide(\n      JSBI.multiply(\n        subIn256(feeGrowthInside1X128, feeGrowthInside1LastX128),\n        liquidity,\n      ),\n      Q128,\n    );\n\n    return [tokensOwed0, tokensOwed1];\n  }\n}\n","import { BigintIsh } from \"../constants\";\nimport JSBI from \"jsbi\";\n\n/**\n * Generated method parameters for executing a call.\n */\nexport interface MethodParameters {\n  /**\n   * The hex encoded calldata to perform the given operation\n   */\n  calldata: string;\n  /**\n   * The amount of ether (wei) to send in hex.\n   */\n  value: string;\n}\n\n/**\n * Converts a big int to a hex string\n * @param bigintIsh\n * @returns The hex encoded calldata\n */\nexport function toHex(bigintIsh: BigintIsh) {\n  const bigInt = JSBI.BigInt(bigintIsh);\n  let hex = bigInt.toString(16);\n  if (hex.length % 2 !== 0) {\n    hex = `0${hex}`;\n  }\n  return `0x${hex}`;\n}\n","import { Interface } from \"@ethersproject/abi\";\nimport IMulticall from \"./abis/IMulticall.json\";\n\nexport abstract class Multicall {\n  public static INTERFACE: Interface = new Interface(IMulticall.abi);\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeMulticall(calldatas: string | string[]): string {\n    if (!Array.isArray(calldatas)) {\n      calldatas = [calldatas];\n    }\n\n    return calldatas.length === 1\n      ? calldatas[0]\n      : Multicall.INTERFACE.encodeFunctionData(\"multicall\", [calldatas]);\n  }\n}\n","import { BigintIsh } from \"./constants\";\nimport { Token } from \"./entities\";\nimport { Interface } from \"@ethersproject/abi\";\nimport ISelfPermit from \"./abis/ISelfPermit.json\";\nimport { toHex } from \"./utils\";\n\nexport interface StandardPermitArguments {\n  v: 0 | 1 | 27 | 28;\n  r: string;\n  s: string;\n  amount: BigintIsh;\n  deadline: BigintIsh;\n}\n\nexport interface AllowedPermitArguments {\n  v: 0 | 1 | 27 | 28;\n  r: string;\n  s: string;\n  nonce: BigintIsh;\n  expiry: BigintIsh;\n}\n\nexport type PermitOptions = StandardPermitArguments | AllowedPermitArguments;\n\nfunction isAllowedPermit(\n  permitOptions: PermitOptions,\n): permitOptions is AllowedPermitArguments {\n  return \"nonce\" in permitOptions;\n}\n\nexport abstract class SelfPermit {\n  public static INTERFACE: Interface = new Interface(ISelfPermit.abi);\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodePermit(token: Token, options: PermitOptions) {\n    return isAllowedPermit(options)\n      ? SelfPermit.INTERFACE.encodeFunctionData(\"selfPermitAllowed\", [\n          token.address,\n          toHex(options.nonce),\n          toHex(options.expiry),\n          options.v,\n          options.r,\n          options.s,\n        ])\n      : SelfPermit.INTERFACE.encodeFunctionData(\"selfPermit\", [\n          token.address,\n          toHex(options.amount),\n          toHex(options.deadline),\n          options.v,\n          options.r,\n          options.s,\n        ]);\n  }\n}\n","import JSBI from \"jsbi\";\nimport { Interface } from \"@ethersproject/abi\";\nimport IPeripheryPaymentsWithFee from \"./abis/IPeripheryPaymentsWithFee.json\";\nimport { Percent, Token } from \"./entities\";\nimport { toHex, validateAndParseAddress } from \"./utils\";\n\nexport interface FeeOptions {\n  /**\n   * The percent of the output that will be taken as a fee.\n   */\n  fee: Percent;\n\n  /**\n   * The recipient of the fee.\n   */\n  recipient: string;\n}\n\nexport abstract class Payments {\n  public static INTERFACE: Interface = new Interface(\n    IPeripheryPaymentsWithFee.abi,\n  );\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  private static encodeFeeBips(fee: Percent): string {\n    return toHex(fee.multiply(10_000).quotient);\n  }\n\n  public static encodeUnwrapWETH9(\n    amountMinimum: JSBI,\n    recipient: string,\n    feeOptions?: FeeOptions,\n  ): string {\n    recipient = validateAndParseAddress(recipient);\n\n    if (!!feeOptions) {\n      const feeBips = this.encodeFeeBips(feeOptions.fee);\n      const feeRecipient: string = validateAndParseAddress(\n        feeOptions.recipient,\n      );\n\n      return Payments.INTERFACE.encodeFunctionData(\"unwrapWETH9WithFee\", [\n        toHex(amountMinimum),\n        recipient,\n        feeBips,\n        feeRecipient,\n      ]);\n    } else {\n      return Payments.INTERFACE.encodeFunctionData(\"unwrapWETH9\", [\n        toHex(amountMinimum),\n        recipient,\n      ]);\n    }\n  }\n\n  public static encodeSweepToken(\n    token: Token,\n    amountMinimum: JSBI,\n    recipient: string,\n    feeOptions?: FeeOptions,\n  ): string {\n    recipient = validateAndParseAddress(recipient);\n\n    if (!!feeOptions) {\n      const feeBips = this.encodeFeeBips(feeOptions.fee);\n      const feeRecipient: string = validateAndParseAddress(\n        feeOptions.recipient,\n      );\n\n      return Payments.INTERFACE.encodeFunctionData(\"sweepTokenWithFee\", [\n        token.address,\n        toHex(amountMinimum),\n        recipient,\n        feeBips,\n        feeRecipient,\n      ]);\n    } else {\n      return Payments.INTERFACE.encodeFunctionData(\"sweepToken\", [\n        token.address,\n        toHex(amountMinimum),\n        recipient,\n      ]);\n    }\n  }\n\n  public static encodeRefundETH(): string {\n    return Payments.INTERFACE.encodeFunctionData(\"refundETH\");\n  }\n}\n","import {\n  Percent,\n  Token,\n  CurrencyAmount,\n  Currency,\n  NativeCurrency,\n  Pool,\n} from \"./entities\";\nimport { BigintIsh, ONE, ZERO } from \"./constants\";\nimport { validateAndParseAddress } from \"./utils\";\nimport JSBI from \"jsbi\";\nimport invariant from \"tiny-invariant\";\nimport { Position } from \"./entities/position\";\n\nimport { MethodParameters, toHex } from \"./utils/calldata\";\nimport { Interface } from \"@ethersproject/abi\";\nimport INonfungiblePositionManager from \"./abis/NonfungiblePositionManager.json\";\nimport { PermitOptions, SelfPermit } from \"./selfPermit\";\nimport { ZERO_ADDRESS } from \"./addresses\";\nimport { Multicall } from \"./multicall\";\nimport { Payments } from \"./payments\";\n\nconst MaxUint128 = toHex(\n  JSBI.subtract(\n    JSBI.exponentiate(JSBI.BigInt(2), JSBI.BigInt(128)),\n    JSBI.BigInt(1),\n  ),\n);\n\nexport interface MintSpecificOptions {\n  /**\n   * The account that should receive the minted NFT.\n   */\n  recipient: string;\n\n  /**\n   * Creates pool if not initialized before mint.\n   */\n  createPool?: boolean;\n}\n\nexport interface IncreaseSpecificOptions {\n  /**\n   * Indicates the ID of the position to increase liquidity for.\n   */\n  tokenId: BigintIsh;\n}\n\n/**\n * Options for producing the calldata to add liquidity.\n */\nexport interface CommonAddLiquidityOptions {\n  /**\n   * How much the pool price is allowed to move.\n   */\n  slippageTolerance: Percent;\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh;\n\n  /**\n   * Whether to spend ether. If true, one of the pool tokens must be WETH, by default false\n   */\n  useNative?: NativeCurrency;\n\n  /**\n   * The optional permit parameters for spending token0\n   */\n  token0Permit?: PermitOptions;\n\n  /**\n   * The optional permit parameters for spending token1\n   */\n  token1Permit?: PermitOptions;\n}\n\nexport type MintOptions = CommonAddLiquidityOptions & MintSpecificOptions;\nexport type IncreaseOptions = CommonAddLiquidityOptions &\n  IncreaseSpecificOptions;\n\nexport type AddLiquidityOptions = MintOptions | IncreaseOptions;\n\nexport interface SafeTransferOptions {\n  /**\n   * The account sending the NFT.\n   */\n  sender: string;\n\n  /**\n   * The account that should receive the NFT.\n   */\n  recipient: string;\n\n  /**\n   * The id of the token being sent.\n   */\n  tokenId: BigintIsh;\n  /**\n   * The optional parameter that passes data to the `onERC721Received` call for the staker\n   */\n  data?: string;\n}\n\n// type guard\nfunction isMint(options: AddLiquidityOptions): options is MintOptions {\n  return Object.keys(options).some((k) => k === \"recipient\");\n}\n\nexport interface CollectOptions {\n  /**\n   * Indicates the ID of the position to collect for.\n   */\n  tokenId: BigintIsh;\n\n  /**\n   * Expected value of tokensOwed0, including as-of-yet-unaccounted-for fees/liquidity value to be burned\n   */\n  expectedCurrencyOwed0: CurrencyAmount<Currency>;\n\n  /**\n   * Expected value of tokensOwed1, including as-of-yet-unaccounted-for fees/liquidity value to be burned\n   */\n  expectedCurrencyOwed1: CurrencyAmount<Currency>;\n\n  /**\n   * The account that should receive the tokens.\n   */\n  recipient: string;\n}\n\nexport interface NFTPermitOptions {\n  v: 0 | 1 | 27 | 28;\n  r: string;\n  s: string;\n  deadline: BigintIsh;\n  spender: string;\n}\n\n/**\n * Options for producing the calldata to exit a position.\n */\nexport interface RemoveLiquidityOptions {\n  /**\n   * The ID of the token to exit\n   */\n  tokenId: BigintIsh;\n\n  /**\n   * The percentage of position liquidity to exit.\n   */\n  liquidityPercentage: Percent;\n\n  /**\n   * How much the pool price is allowed to move.\n   */\n  slippageTolerance: Percent;\n\n  /**\n   * When the transaction expires, in epoch seconds.\n   */\n  deadline: BigintIsh;\n\n  /**\n   * Whether the NFT should be burned if the entire position is being exited, by default false.\n   */\n  burnToken?: boolean;\n\n  /**\n   * The optional permit of the token ID being exited, in case the exit transaction is being sent by an account that does not own the NFT\n   */\n  permit?: NFTPermitOptions;\n\n  /**\n   * Parameters to be passed on to collect\n   */\n  collectOptions: Omit<CollectOptions, \"tokenId\">;\n}\n\nexport abstract class NonfungiblePositionManager {\n  public static INTERFACE: Interface = new Interface(\n    INonfungiblePositionManager.abi,\n  );\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  private static encodeCreate(pool: Pool): string {\n    return NonfungiblePositionManager.INTERFACE.encodeFunctionData(\n      \"createAndInitializePoolIfNecessary\",\n      [\n        pool.token0.address,\n        pool.token1.address,\n        pool.fee,\n        toHex(pool.sqrtRatioX96),\n      ],\n    );\n  }\n\n  public static createCallParameters(pool: Pool): MethodParameters {\n    return {\n      calldata: this.encodeCreate(pool),\n      value: toHex(0),\n    };\n  }\n\n  public static addCallParameters(\n    position: Position,\n    options: AddLiquidityOptions,\n  ): MethodParameters {\n    invariant(JSBI.greaterThan(position.liquidity, ZERO), \"ZERO_LIQUIDITY\");\n\n    const calldatas: string[] = [];\n\n    // get amounts\n    const { amount0: amount0Desired, amount1: amount1Desired } =\n      position.mintAmounts;\n\n    // adjust for slippage\n    const minimumAmounts = position.mintAmountsWithSlippage(\n      options.slippageTolerance,\n    );\n    const amount0Min = toHex(minimumAmounts.amount0);\n    const amount1Min = toHex(minimumAmounts.amount1);\n\n    const deadline = toHex(options.deadline);\n\n    // create pool if needed\n    if (isMint(options) && options.createPool) {\n      calldatas.push(this.encodeCreate(position.pool));\n    }\n\n    // permits if necessary\n    if (options.token0Permit) {\n      calldatas.push(\n        SelfPermit.encodePermit(position.pool.token0, options.token0Permit),\n      );\n    }\n    if (options.token1Permit) {\n      calldatas.push(\n        SelfPermit.encodePermit(position.pool.token1, options.token1Permit),\n      );\n    }\n\n    // mint\n    if (isMint(options)) {\n      const recipient: string = validateAndParseAddress(options.recipient);\n\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData(\"mint\", [\n          {\n            token0: position.pool.token0.address,\n            token1: position.pool.token1.address,\n            fee: position.pool.fee,\n            tickLower: position.tickLower,\n            tickUpper: position.tickUpper,\n            amount0Desired: toHex(amount0Desired),\n            amount1Desired: toHex(amount1Desired),\n            amount0Min,\n            amount1Min,\n            recipient,\n            deadline,\n          },\n        ]),\n      );\n    } else {\n      // increase\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData(\n          \"increaseLiquidity\",\n          [\n            {\n              tokenId: toHex(options.tokenId),\n              amount0Desired: toHex(amount0Desired),\n              amount1Desired: toHex(amount1Desired),\n              amount0Min,\n              amount1Min,\n              deadline,\n            },\n          ],\n        ),\n      );\n    }\n\n    let value: string = toHex(0);\n\n    if (options.useNative) {\n      const wrapped = options.useNative.wrapped;\n      invariant(\n        position.pool.token0.equals(wrapped) ||\n          position.pool.token1.equals(wrapped),\n        \"NO_WETH\",\n      );\n\n      const wrappedValue = position.pool.token0.equals(wrapped)\n        ? amount0Desired\n        : amount1Desired;\n\n      // we only need to refund if we're actually sending ETH\n      if (JSBI.greaterThan(wrappedValue, ZERO)) {\n        calldatas.push(Payments.encodeRefundETH());\n      }\n\n      value = toHex(wrappedValue);\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value,\n    };\n  }\n\n  private static encodeCollect(options: CollectOptions): string[] {\n    const calldatas: string[] = [];\n\n    const tokenId = toHex(options.tokenId);\n\n    const involvesETH =\n      options.expectedCurrencyOwed0.currency.isNative ||\n      options.expectedCurrencyOwed1.currency.isNative;\n\n    const recipient = validateAndParseAddress(options.recipient);\n\n    // collect\n    calldatas.push(\n      NonfungiblePositionManager.INTERFACE.encodeFunctionData(\"collect\", [\n        {\n          tokenId,\n          recipient: involvesETH ? ZERO_ADDRESS : recipient,\n          amount0Max: MaxUint128,\n          amount1Max: MaxUint128,\n        },\n      ]),\n    );\n\n    if (involvesETH) {\n      const ethAmount = options.expectedCurrencyOwed0.currency.isNative\n        ? options.expectedCurrencyOwed0.quotient\n        : options.expectedCurrencyOwed1.quotient;\n      const token = options.expectedCurrencyOwed0.currency.isNative\n        ? (options.expectedCurrencyOwed1.currency as Token)\n        : (options.expectedCurrencyOwed0.currency as Token);\n      const tokenAmount = options.expectedCurrencyOwed0.currency.isNative\n        ? options.expectedCurrencyOwed1.quotient\n        : options.expectedCurrencyOwed0.quotient;\n\n      calldatas.push(Payments.encodeUnwrapWETH9(ethAmount, recipient));\n      calldatas.push(Payments.encodeSweepToken(token, tokenAmount, recipient));\n    }\n\n    return calldatas;\n  }\n\n  public static collectCallParameters(\n    options: CollectOptions,\n  ): MethodParameters {\n    const calldatas: string[] =\n      NonfungiblePositionManager.encodeCollect(options);\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0),\n    };\n  }\n\n  /**\n   * Produces the calldata for completely or partially exiting a position\n   * @param position The position to exit\n   * @param options Additional information necessary for generating the calldata\n   * @returns The call parameters\n   */\n  public static removeCallParameters(\n    position: Position,\n    options: RemoveLiquidityOptions,\n  ): MethodParameters {\n    const calldatas: string[] = [];\n\n    const deadline = toHex(options.deadline);\n    const tokenId = toHex(options.tokenId);\n\n    // construct a partial position with a percentage of liquidity\n    const partialPosition = new Position({\n      pool: position.pool,\n      liquidity: options.liquidityPercentage.multiply(position.liquidity)\n        .quotient,\n      tickLower: position.tickLower,\n      tickUpper: position.tickUpper,\n    });\n    invariant(\n      JSBI.greaterThan(partialPosition.liquidity, ZERO),\n      \"ZERO_LIQUIDITY\",\n    );\n\n    // slippage-adjusted underlying amounts\n    const { amount0: amount0Min, amount1: amount1Min } =\n      partialPosition.burnAmountsWithSlippage(options.slippageTolerance);\n\n    if (options.permit) {\n      calldatas.push(\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData(\"permit\", [\n          validateAndParseAddress(options.permit.spender),\n          tokenId,\n          toHex(options.permit.deadline),\n          options.permit.v,\n          options.permit.r,\n          options.permit.s,\n        ]),\n      );\n    }\n\n    // remove liquidity\n    calldatas.push(\n      NonfungiblePositionManager.INTERFACE.encodeFunctionData(\n        \"decreaseLiquidity\",\n        [\n          {\n            tokenId,\n            liquidity: toHex(partialPosition.liquidity),\n            amount0Min: toHex(amount0Min),\n            amount1Min: toHex(amount1Min),\n            deadline,\n          },\n        ],\n      ),\n    );\n\n    const { expectedCurrencyOwed0, expectedCurrencyOwed1, ...rest } =\n      options.collectOptions;\n    calldatas.push(\n      ...NonfungiblePositionManager.encodeCollect({\n        tokenId: toHex(options.tokenId),\n        // add the underlying value to the expected currency already owed\n        expectedCurrencyOwed0: expectedCurrencyOwed0.add(\n          CurrencyAmount.fromRawAmount(\n            expectedCurrencyOwed0.currency,\n            amount0Min,\n          ),\n        ),\n        expectedCurrencyOwed1: expectedCurrencyOwed1.add(\n          CurrencyAmount.fromRawAmount(\n            expectedCurrencyOwed1.currency,\n            amount1Min,\n          ),\n        ),\n        ...rest,\n      }),\n    );\n\n    if (options.liquidityPercentage.equalTo(ONE)) {\n      if (options.burnToken) {\n        calldatas.push(\n          NonfungiblePositionManager.INTERFACE.encodeFunctionData(\"burn\", [\n            tokenId,\n          ]),\n        );\n      }\n    } else {\n      invariant(options.burnToken !== true, \"CANNOT_BURN\");\n    }\n\n    return {\n      calldata: Multicall.encodeMulticall(calldatas),\n      value: toHex(0),\n    };\n  }\n\n  public static safeTransferFromParameters(\n    options: SafeTransferOptions,\n  ): MethodParameters {\n    const recipient = validateAndParseAddress(options.recipient);\n    const sender = validateAndParseAddress(options.sender);\n\n    let calldata: string;\n    if (options.data) {\n      calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData(\n        \"safeTransferFrom(address,address,uint256,bytes)\",\n        [sender, recipient, toHex(options.tokenId), options.data],\n      );\n    } else {\n      calldata = NonfungiblePositionManager.INTERFACE.encodeFunctionData(\n        \"safeTransferFrom(address,address,uint256)\",\n        [sender, recipient, toHex(options.tokenId)],\n      );\n    }\n    return {\n      calldata: calldata,\n      value: toHex(0),\n    };\n  }\n}\n","import { Interface } from \"@ethersproject/abi\";\n\nimport { abi } from \"./abis/IMulticallExtended.json\";\nimport { Multicall } from \"./multicall\";\nimport { BigintIsh } from \"./constants\";\nimport { toHex } from \"./utils\";\n\n// deadline or previousBlockhash\nexport type Validation = BigintIsh | string;\n\nfunction validateAndParseBytes32(bytes32: string): string {\n  if (!bytes32.match(/^0x[0-9a-fA-F]{64}$/)) {\n    throw new Error(`${bytes32} is not valid bytes32.`);\n  }\n\n  return bytes32.toLowerCase();\n}\n\nexport abstract class MulticallExtended {\n  public static INTERFACE: Interface = new Interface(abi);\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeMulticall(\n    calldatas: string | string[],\n    validation?: Validation,\n  ): string {\n    // if there's no validation, we can just fall back to regular multicall\n    if (typeof validation === \"undefined\") {\n      return Multicall.encodeMulticall(calldatas);\n    }\n\n    // if there is validation, we have to normalize calldatas\n    if (!Array.isArray(calldatas)) {\n      calldatas = [calldatas];\n    }\n\n    // this means the validation value should be a previousBlockhash\n    if (typeof validation === \"string\" && validation.startsWith(\"0x\")) {\n      const previousBlockhash = validateAndParseBytes32(validation);\n      return MulticallExtended.INTERFACE.encodeFunctionData(\n        \"multicall(bytes32,bytes[])\",\n        [previousBlockhash, calldatas],\n      );\n    } else {\n      const deadline = toHex(validation);\n      return MulticallExtended.INTERFACE.encodeFunctionData(\n        \"multicall(uint256,bytes[])\",\n        [deadline, calldatas],\n      );\n    }\n  }\n}\n","import { Interface } from \"@ethersproject/abi\";\n\nimport { abi } from \"./abis/IPeripheryPaymentsWithFeeExtended.json\";\n\nimport { FeeOptions, Payments } from \"./payments\";\nimport { toHex, validateAndParseAddress } from \"./utils\";\nimport { Percent, Token } from \"./entities\";\nimport JSBI from \"jsbi\";\n\nfunction encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient);\n}\n\nexport abstract class PaymentsExtended {\n  public static INTERFACE: Interface = new Interface(abi);\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeUnwrapWETH9(\n    amountMinimum: JSBI,\n    recipient?: string,\n    feeOptions?: FeeOptions,\n  ): string {\n    // if there's a recipient, just pass it along\n    if (typeof recipient === \"string\") {\n      return Payments.encodeUnwrapWETH9(amountMinimum, recipient, feeOptions);\n    }\n\n    if (!!feeOptions) {\n      const feeBips = encodeFeeBips(feeOptions.fee);\n      const feeRecipient = validateAndParseAddress(feeOptions.recipient);\n\n      return PaymentsExtended.INTERFACE.encodeFunctionData(\n        \"unwrapWETH9WithFee(uint256,uint256,address)\",\n        [toHex(amountMinimum), feeBips, feeRecipient],\n      );\n    } else {\n      return PaymentsExtended.INTERFACE.encodeFunctionData(\n        \"unwrapWETH9(uint256)\",\n        [toHex(amountMinimum)],\n      );\n    }\n  }\n\n  public static encodeSweepToken(\n    token: Token,\n    amountMinimum: JSBI,\n    recipient?: string,\n    feeOptions?: FeeOptions,\n  ): string {\n    // if there's a recipient, just pass it along\n    if (typeof recipient === \"string\") {\n      return Payments.encodeSweepToken(\n        token,\n        amountMinimum,\n        recipient,\n        feeOptions,\n      );\n    }\n\n    if (!!feeOptions) {\n      const feeBips = encodeFeeBips(feeOptions.fee);\n      const feeRecipient = validateAndParseAddress(feeOptions.recipient);\n\n      return PaymentsExtended.INTERFACE.encodeFunctionData(\n        \"sweepTokenWithFee(address,uint256,uint256,address)\",\n        [token.address, toHex(amountMinimum), feeBips, feeRecipient],\n      );\n    } else {\n      return PaymentsExtended.INTERFACE.encodeFunctionData(\n        \"sweepToken(address,uint256)\",\n        [token.address, toHex(amountMinimum)],\n      );\n    }\n  }\n\n  public static encodePull(token: Token, amount: JSBI): string {\n    return PaymentsExtended.INTERFACE.encodeFunctionData(\"pull\", [\n      token.address,\n      toHex(amount),\n    ]);\n  }\n\n  public static encodeWrapETH(amount: JSBI): string {\n    return PaymentsExtended.INTERFACE.encodeFunctionData(\"wrapETH\", [\n      toHex(amount),\n    ]);\n  }\n}\n","import { Interface } from \"@ethersproject/abi\";\nimport invariant from \"tiny-invariant\";\nimport { abi } from \"./abis/IApproveAndCall.json\";\n\nimport {\n  MintSpecificOptions,\n  IncreaseSpecificOptions,\n  NonfungiblePositionManager,\n} from \"./nonfungiblePositionManager\";\n\nimport { Position, Currency, Percent, Token } from \"./entities\";\nimport { toHex } from \"./utils\";\n\nimport JSBI from \"jsbi\";\n\n// condensed version of v3-sdk AddLiquidityOptions containing only necessary swap + add attributes\nexport type CondensedAddLiquidityOptions =\n  | Omit<MintSpecificOptions, \"createPool\">\n  | IncreaseSpecificOptions;\n\nexport enum ApprovalTypes {\n  NOT_REQUIRED = 0,\n  MAX = 1,\n  MAX_MINUS_ONE = 2,\n  ZERO_THEN_MAX = 3,\n  ZERO_THEN_MAX_MINUS_ONE = 4,\n}\n\n// type guard\nexport function isMint(\n  options: CondensedAddLiquidityOptions,\n): options is Omit<MintSpecificOptions, \"createPool\"> {\n  return Object.keys(options).some((k) => k === \"recipient\");\n}\n\nexport abstract class ApproveAndCall {\n  public static INTERFACE: Interface = new Interface(abi);\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeApproveMax(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData(\"approveMax\", [\n      token.address,\n    ]);\n  }\n\n  public static encodeApproveMaxMinusOne(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData(\"approveMaxMinusOne\", [\n      token.address,\n    ]);\n  }\n\n  public static encodeApproveZeroThenMax(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData(\"approveZeroThenMax\", [\n      token.address,\n    ]);\n  }\n\n  public static encodeApproveZeroThenMaxMinusOne(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData(\n      \"approveZeroThenMaxMinusOne\",\n      [token.address],\n    );\n  }\n\n  public static encodeCallPositionManager(calldatas: string[]): string {\n    invariant(calldatas.length > 0, \"NULL_CALLDATA\");\n\n    if (calldatas.length == 1) {\n      return ApproveAndCall.INTERFACE.encodeFunctionData(\n        \"callPositionManager\",\n        calldatas,\n      );\n    } else {\n      const encodedMulticall =\n        NonfungiblePositionManager.INTERFACE.encodeFunctionData(\"multicall\", [\n          calldatas,\n        ]);\n      return ApproveAndCall.INTERFACE.encodeFunctionData(\n        \"callPositionManager\",\n        [encodedMulticall],\n      );\n    }\n  }\n  /**\n   * Encode adding liquidity to a position in the nft manager contract\n   * @param position Forcasted position with expected amount out from swap\n   * @param minimalPosition Forcasted position with custom minimal token amounts\n   * @param addLiquidityOptions Options for adding liquidity\n   * @param slippageTolerance Defines maximum slippage\n   */\n  public static encodeAddLiquidity(\n    position: Position,\n    minimalPosition: Position,\n    addLiquidityOptions: CondensedAddLiquidityOptions,\n    slippageTolerance: Percent,\n  ): string {\n    let { amount0: amount0Min, amount1: amount1Min } =\n      position.mintAmountsWithSlippage(slippageTolerance);\n\n    // position.mintAmountsWithSlippage() can create amounts not dependenable in scenarios\n    // such as range orders. Allow the option to provide a position with custom minimum amounts\n    // for these scenarios\n    if (JSBI.lessThan(minimalPosition.amount0.quotient, amount0Min)) {\n      amount0Min = minimalPosition.amount0.quotient;\n    }\n    if (JSBI.lessThan(minimalPosition.amount1.quotient, amount1Min)) {\n      amount1Min = minimalPosition.amount1.quotient;\n    }\n\n    if (isMint(addLiquidityOptions)) {\n      return ApproveAndCall.INTERFACE.encodeFunctionData(\"mint\", [\n        {\n          token0: position.pool.token0.address,\n          token1: position.pool.token1.address,\n          fee: position.pool.fee,\n          tickLower: position.tickLower,\n          tickUpper: position.tickUpper,\n          amount0Min: toHex(amount0Min),\n          amount1Min: toHex(amount1Min),\n          recipient: addLiquidityOptions.recipient,\n        },\n      ]);\n    } else {\n      return ApproveAndCall.INTERFACE.encodeFunctionData(\"increaseLiquidity\", [\n        {\n          token0: position.pool.token0.address,\n          token1: position.pool.token1.address,\n          amount0Min: toHex(amount0Min),\n          amount1Min: toHex(amount1Min),\n          tokenId: toHex(addLiquidityOptions.tokenId),\n        },\n      ]);\n    }\n  }\n\n  public static encodeApprove(\n    token: Currency,\n    approvalType: ApprovalTypes,\n  ): string {\n    switch (approvalType) {\n      case ApprovalTypes.MAX:\n        return ApproveAndCall.encodeApproveMax(token.wrapped);\n      case ApprovalTypes.MAX_MINUS_ONE:\n        return ApproveAndCall.encodeApproveMaxMinusOne(token.wrapped);\n      case ApprovalTypes.ZERO_THEN_MAX:\n        return ApproveAndCall.encodeApproveZeroThenMax(token.wrapped);\n      case ApprovalTypes.ZERO_THEN_MAX_MINUS_ONE:\n        return ApproveAndCall.encodeApproveZeroThenMaxMinusOne(token.wrapped);\n      default:\n        throw \"Error: invalid ApprovalType\";\n    }\n  }\n}\n","import { WRAPPED_NATIVE_TOKEN_ADDRESS, USDC_TOKEN_ADDRESS } from \"./addresses\";\n\nimport { Token, Currency, NativeCurrency } from \"./entities\";\n\nexport const USDC = new Token(\n  USDC_TOKEN_ADDRESS,\n  18,\n  \"USDC\",\n  \"USD Coin\",\n  \"/icons/usdc.png\",\n  \"usd-coin\",\n);\n\nexport const WRAPPED_NATIVE_TOKEN = new Token(\n  WRAPPED_NATIVE_TOKEN_ADDRESS,\n  18,\n  \"WETH\",\n  \"Wrapped ETH\",\n  \"/icons/weth.svg\",\n  \"weth\",\n);\n\nclass _NativeCurrenty extends NativeCurrency {\n  public constructor() {\n    super(18, \"ETH\", \"Ethereum\", \"/icons/eth.svg\", \"ethereum\");\n  }\n\n  public get wrapped(): Token {\n    return WRAPPED_NATIVE_TOKEN;\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative;\n  }\n\n  static get id() {\n    return \"ETH\";\n  }\n}\n\nexport const NATIVE_CURRENCY = new _NativeCurrenty();\n","import { Interface } from \"@ethersproject/abi\";\nimport {\n  Currency,\n  CurrencyAmount,\n  Percent,\n  TradeSDK,\n  Route,\n  Trade,\n  Position,\n} from \"./entities\";\n\nimport {\n  MethodParameters,\n  validateAndParseAddress,\n  encodeRouteToPath,\n  toHex,\n} from \"./utils\";\n\nimport { TradeType, ADDRESS_THIS, MSG_SENDER } from \"./constants\";\n\nimport { WRAPPED_NATIVE_TOKEN } from \"./tokens\";\n\nimport { Payments, FeeOptions } from \"./payments\";\nimport { PermitOptions, SelfPermit } from \"./selfPermit\";\n\nimport { abi } from \"./abis/ISwapRouter02.json\";\n\nimport invariant from \"tiny-invariant\";\nimport JSBI from \"jsbi\";\n\nimport {\n  ApproveAndCall,\n  ApprovalTypes,\n  CondensedAddLiquidityOptions,\n} from \"./approveAndCall\";\n\nimport { MulticallExtended, Validation } from \"./multicallExtended\";\nimport { PaymentsExtended } from \"./paymentsExtended\";\n\nconst ZERO = JSBI.BigInt(0);\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(\n  JSBI.BigInt(50),\n  JSBI.BigInt(100),\n);\n/**\n * Options for producing the arguments to send calls to the router.\n */\nexport interface SwapOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  slippageTolerance: Percent;\n\n  /**\n   * The account that should receive the output. If omitted, output is sent to msg.sender.\n   */\n  recipient?: string;\n\n  /**\n   * Either deadline (when the transaction expires, in epoch seconds), or previousBlockhash.\n   */\n  deadlineOrPreviousBlockhash?: Validation;\n\n  /**\n   * The optional permit parameters for spending the input.\n   */\n  inputTokenPermit?: PermitOptions;\n\n  /**\n   * Optional information for taking a fee on output.\n   */\n  fee?: FeeOptions;\n}\n\nexport interface SwapAndAddOptions extends SwapOptions {\n  /**\n   * The optional permit parameters for pulling in remaining output token.\n   */\n  outputTokenPermit?: PermitOptions;\n}\n\ntype AnyTradeType =\n  | Trade<Currency, Currency, TradeType>\n  | TradeSDK<Currency, Currency, TradeType>\n  | TradeSDK<Currency, Currency, TradeType>[];\n\n/**\n * Represents the Uniswap V2 + V3 SwapRouter02, and has static methods for helping execute trades.\n */\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi);\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * @notice Generates the calldata for a Swap with a V3 Route.\n   * @param trade The V3Trade to encode.\n   * @param options SwapOptions to use for the trade.\n   * @param routerMustCustody Flag for whether funds should be sent to the router\n   * @param performAggregatedSlippageCheck Flag for whether we want to perform an aggregated slippage check\n   * @returns A string array of calldatas for the trade.\n   */\n  private static encodeV3Swap(\n    trade: TradeSDK<Currency, Currency, TradeType>,\n    options: SwapOptions,\n    routerMustCustody: boolean,\n    performAggregatedSlippageCheck: boolean,\n  ): string[] {\n    const calldatas: string[] = [];\n\n    for (const { route, inputAmount, outputAmount } of trade.swaps) {\n      const amountIn: string = toHex(\n        trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient,\n      );\n      const amountOut: string = toHex(\n        trade.minimumAmountOut(options.slippageTolerance, outputAmount)\n          .quotient,\n      );\n\n      // flag for whether the trade is single hop or not\n      const singleHop = route.pools.length === 1;\n\n      const recipient = routerMustCustody\n        ? ADDRESS_THIS\n        : typeof options.recipient === \"undefined\"\n        ? MSG_SENDER\n        : validateAndParseAddress(options.recipient);\n\n      if (singleHop) {\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\n          const exactInputSingleParams = {\n            tokenIn: route.tokenPath[0].address,\n            tokenOut: route.tokenPath[1].address,\n            fee: route.pools[0].fee,\n            recipient,\n            amountIn,\n            amountOutMinimum: performAggregatedSlippageCheck ? 0 : amountOut,\n            sqrtPriceLimitX96: 0,\n          };\n\n          calldatas.push(\n            SwapRouter.INTERFACE.encodeFunctionData(\"exactInputSingle\", [\n              exactInputSingleParams,\n            ]),\n          );\n        } else {\n          const exactOutputSingleParams = {\n            tokenIn: route.tokenPath[0].address,\n            tokenOut: route.tokenPath[1].address,\n            fee: route.pools[0].fee,\n            recipient,\n            amountOut,\n            amountInMaximum: amountIn,\n            sqrtPriceLimitX96: 0,\n          };\n\n          calldatas.push(\n            SwapRouter.INTERFACE.encodeFunctionData(\"exactOutputSingle\", [\n              exactOutputSingleParams,\n            ]),\n          );\n        }\n      } else {\n        const path: string = encodeRouteToPath(\n          route,\n          trade.tradeType === TradeType.EXACT_OUTPUT,\n        );\n\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\n          const exactInputParams = {\n            path,\n            recipient,\n            amountIn,\n            amountOutMinimum: performAggregatedSlippageCheck ? 0 : amountOut,\n          };\n\n          calldatas.push(\n            SwapRouter.INTERFACE.encodeFunctionData(\"exactInput\", [\n              exactInputParams,\n            ]),\n          );\n        } else {\n          const exactOutputParams = {\n            path,\n            recipient,\n            amountOut,\n            amountInMaximum: amountIn,\n          };\n\n          calldatas.push(\n            SwapRouter.INTERFACE.encodeFunctionData(\"exactOutput\", [\n              exactOutputParams,\n            ]),\n          );\n        }\n      }\n    }\n\n    return calldatas;\n  }\n\n  private static encodeSwaps(\n    trades: AnyTradeType,\n    options: SwapOptions,\n    isSwapAndAdd?: boolean,\n  ): {\n    calldatas: string[];\n    sampleTrade: TradeSDK<Currency, Currency, TradeType>;\n    routerMustCustody: boolean;\n    inputIsNative: boolean;\n    outputIsNative: boolean;\n    totalAmountIn: CurrencyAmount<Currency>;\n    minimumAmountOut: CurrencyAmount<Currency>;\n    quoteAmountOut: CurrencyAmount<Currency>;\n  } {\n    // If dealing with an instance of the aggregated Trade object, unbundle it to individual trade objects.\n    if (trades instanceof Trade) {\n      let individualTrades: TradeSDK<Currency, Currency, TradeType>[] = [];\n\n      for (const { route, inputAmount, outputAmount } of trades.swaps) {\n        individualTrades.push(\n          TradeSDK.createUncheckedTrade({\n            route: route as Route<Currency, Currency>,\n            inputAmount,\n            outputAmount,\n            tradeType: trades.tradeType,\n          }),\n        );\n      }\n      trades = individualTrades;\n    }\n\n    if (!Array.isArray(trades)) {\n      trades = [trades];\n    }\n\n    const numberOfTrades = trades.reduce(\n      (numberOfTrades, trade) =>\n        numberOfTrades + (trade instanceof TradeSDK ? trade.swaps.length : 1),\n      0,\n    );\n\n    const sampleTrade = trades[0];\n\n    // All trades should have the same starting/ending currency and trade type\n    invariant(\n      trades.every((trade) =>\n        trade.inputAmount.currency.equals(sampleTrade.inputAmount.currency),\n      ),\n      \"TOKEN_IN_DIFF\",\n    );\n    invariant(\n      trades.every((trade) =>\n        trade.outputAmount.currency.equals(sampleTrade.outputAmount.currency),\n      ),\n      \"TOKEN_OUT_DIFF\",\n    );\n    invariant(\n      trades.every((trade) => trade.tradeType === sampleTrade.tradeType),\n      \"TRADE_TYPE_DIFF\",\n    );\n\n    const calldatas: string[] = [];\n\n    const inputIsNative = sampleTrade.inputAmount.currency.isNative;\n    const outputIsNative = sampleTrade.outputAmount.currency.isNative;\n\n    // flag for whether we want to perform an aggregated slippage check\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      sampleTrade.tradeType === TradeType.EXACT_INPUT && numberOfTrades > 2;\n    // flag for whether funds should be send first to the router\n    //   1. when receiving ETH (which much be unwrapped from WETH)\n    //   2. when a fee on the output is being taken\n    //   3. when performing swap and add\n    //   4. when performing an aggregated slippage check\n    const routerMustCustody =\n      outputIsNative ||\n      !!options.fee ||\n      !!isSwapAndAdd ||\n      performAggregatedSlippageCheck;\n\n    // encode permit if necessary\n    if (options.inputTokenPermit) {\n      invariant(sampleTrade.inputAmount.currency.isToken, \"NON_TOKEN_PERMIT\");\n      calldatas.push(\n        SelfPermit.encodePermit(\n          sampleTrade.inputAmount.currency,\n          options.inputTokenPermit,\n        ),\n      );\n    }\n\n    for (const trade of trades) {\n      if (trade instanceof TradeSDK) {\n        for (const calldata of SwapRouter.encodeV3Swap(\n          trade,\n          options,\n          routerMustCustody,\n          performAggregatedSlippageCheck,\n        )) {\n          calldatas.push(calldata);\n        }\n      } else {\n        throw new Error(\"Unsupported trade object\");\n      }\n    }\n\n    const ZERO_IN: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(\n      sampleTrade.inputAmount.currency,\n      0,\n    );\n    const ZERO_OUT: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(\n      sampleTrade.outputAmount.currency,\n      0,\n    );\n\n    const minimumAmountOut: CurrencyAmount<Currency> = trades.reduce(\n      (sum, trade) =>\n        sum.add(trade.minimumAmountOut(options.slippageTolerance)),\n      ZERO_OUT,\n    );\n\n    const quoteAmountOut: CurrencyAmount<Currency> = trades.reduce(\n      (sum, trade) => sum.add(trade.outputAmount),\n      ZERO_OUT,\n    );\n\n    const totalAmountIn: CurrencyAmount<Currency> = trades.reduce(\n      (sum, trade) => sum.add(trade.maximumAmountIn(options.slippageTolerance)),\n      ZERO_IN,\n    );\n\n    return {\n      calldatas,\n      sampleTrade,\n      routerMustCustody,\n      inputIsNative,\n      outputIsNative,\n      totalAmountIn,\n      minimumAmountOut,\n      quoteAmountOut,\n    };\n  }\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trades:\n      | Trade<Currency, Currency, TradeType>\n      | TradeSDK<Currency, Currency, TradeType>\n      | TradeSDK<Currency, Currency, TradeType>[],\n    options: SwapOptions,\n  ): MethodParameters {\n    const {\n      calldatas,\n      sampleTrade,\n      routerMustCustody,\n      inputIsNative,\n      outputIsNative,\n      totalAmountIn,\n      minimumAmountOut,\n    } = SwapRouter.encodeSwaps(trades, options);\n\n    // unwrap or sweep\n    if (routerMustCustody) {\n      if (outputIsNative) {\n        calldatas.push(\n          PaymentsExtended.encodeUnwrapWETH9(\n            minimumAmountOut.quotient,\n            options.recipient,\n            options.fee,\n          ),\n        );\n      } else {\n        calldatas.push(\n          PaymentsExtended.encodeSweepToken(\n            sampleTrade.outputAmount.currency.wrapped,\n            minimumAmountOut.quotient,\n            options.recipient,\n            options.fee,\n          ),\n        );\n      }\n    }\n\n    // must refund when paying in ETH: either with an uncertain input amount OR if there's a chance of a partial fill.\n    // unlike ERC20's, the full ETH value must be sent in the transaction, so the rest must be refunded.\n    if (\n      inputIsNative &&\n      (sampleTrade.tradeType === TradeType.EXACT_OUTPUT ||\n        SwapRouter.riskOfPartialFill(trades))\n    ) {\n      calldatas.push(Payments.encodeRefundETH());\n    }\n\n    return {\n      calldata: MulticallExtended.encodeMulticall(\n        calldatas,\n        options.deadlineOrPreviousBlockhash,\n      ),\n      value: toHex(inputIsNative ? totalAmountIn.quotient : ZERO),\n    };\n  }\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapAndAddCallParameters(\n    trades: AnyTradeType,\n    options: SwapAndAddOptions,\n    position: Position,\n    addLiquidityOptions: CondensedAddLiquidityOptions,\n    tokenInApprovalType: ApprovalTypes,\n    tokenOutApprovalType: ApprovalTypes,\n  ): MethodParameters {\n    const {\n      calldatas,\n      inputIsNative,\n      outputIsNative,\n      totalAmountIn: totalAmountSwapped,\n      quoteAmountOut,\n      minimumAmountOut,\n    } = SwapRouter.encodeSwaps(trades, options, true);\n\n    // encode output token permit if necessary\n    if (options.outputTokenPermit) {\n      invariant(quoteAmountOut.currency.isToken, \"NON_TOKEN_PERMIT_OUTPUT\");\n      calldatas.push(\n        SelfPermit.encodePermit(\n          quoteAmountOut.currency,\n          options.outputTokenPermit,\n        ),\n      );\n    }\n\n    const zeroForOne =\n      position.pool.token0.wrapped.address ===\n      totalAmountSwapped.currency.wrapped.address;\n    const { positionAmountIn, positionAmountOut } =\n      SwapRouter.getPositionAmounts(position, zeroForOne);\n\n    // if tokens are native they will be converted to WETH9\n    const tokenIn = inputIsNative\n      ? WRAPPED_NATIVE_TOKEN\n      : positionAmountIn.currency.wrapped;\n    const tokenOut = outputIsNative\n      ? WRAPPED_NATIVE_TOKEN\n      : positionAmountOut.currency.wrapped;\n\n    // if swap output does not make up whole outputTokenBalanceDesired, pull in remaining tokens for adding liquidity\n    const amountOutRemaining = positionAmountOut.subtract(\n      quoteAmountOut.wrapped,\n    );\n    if (\n      amountOutRemaining.greaterThan(\n        CurrencyAmount.fromRawAmount(positionAmountOut.currency, 0),\n      )\n    ) {\n      // if output is native, this means the remaining portion is included as native value in the transaction\n      // and must be wrapped. Otherwise, pull in remaining ERC20 token.\n      outputIsNative\n        ? calldatas.push(\n            PaymentsExtended.encodeWrapETH(amountOutRemaining.quotient),\n          )\n        : calldatas.push(\n            PaymentsExtended.encodePull(tokenOut, amountOutRemaining.quotient),\n          );\n    }\n\n    // if input is native, convert to WETH9, else pull ERC20 token\n    inputIsNative\n      ? calldatas.push(\n          PaymentsExtended.encodeWrapETH(positionAmountIn.quotient),\n        )\n      : calldatas.push(\n          PaymentsExtended.encodePull(tokenIn, positionAmountIn.quotient),\n        );\n\n    // approve token balances to NFTManager\n    if (tokenInApprovalType !== ApprovalTypes.NOT_REQUIRED)\n      calldatas.push(\n        ApproveAndCall.encodeApprove(tokenIn, tokenInApprovalType),\n      );\n    if (tokenOutApprovalType !== ApprovalTypes.NOT_REQUIRED)\n      calldatas.push(\n        ApproveAndCall.encodeApprove(tokenOut, tokenOutApprovalType),\n      );\n\n    // represents a position with token amounts resulting from a swap with maximum slippage\n    // hence the minimal amount out possible.\n    const minimalPosition = Position.fromAmounts({\n      pool: position.pool,\n      tickLower: position.tickLower,\n      tickUpper: position.tickUpper,\n      amount0: zeroForOne\n        ? position.amount0.quotient.toString()\n        : minimumAmountOut.quotient.toString(),\n      amount1: zeroForOne\n        ? minimumAmountOut.quotient.toString()\n        : position.amount1.quotient.toString(),\n      useFullPrecision: false,\n    });\n\n    // encode NFTManager add liquidity\n    calldatas.push(\n      ApproveAndCall.encodeAddLiquidity(\n        position,\n        minimalPosition,\n        addLiquidityOptions,\n        options.slippageTolerance,\n      ),\n    );\n\n    // sweep remaining tokens\n    inputIsNative\n      ? calldatas.push(PaymentsExtended.encodeUnwrapWETH9(ZERO))\n      : calldatas.push(PaymentsExtended.encodeSweepToken(tokenIn, ZERO));\n    outputIsNative\n      ? calldatas.push(PaymentsExtended.encodeUnwrapWETH9(ZERO))\n      : calldatas.push(PaymentsExtended.encodeSweepToken(tokenOut, ZERO));\n\n    let value: JSBI;\n    if (inputIsNative) {\n      value = totalAmountSwapped.wrapped.add(positionAmountIn.wrapped).quotient;\n    } else if (outputIsNative) {\n      value = amountOutRemaining.quotient;\n    } else {\n      value = ZERO;\n    }\n\n    return {\n      calldata: MulticallExtended.encodeMulticall(\n        calldatas,\n        options.deadlineOrPreviousBlockhash,\n      ),\n      value: value.toString(),\n    };\n  }\n\n  // if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\n  private static riskOfPartialFill(trades: AnyTradeType): boolean {\n    if (Array.isArray(trades)) {\n      return trades.some((trade) => {\n        return SwapRouter.v3TradeWithHighPriceImpact(trade);\n      });\n    } else {\n      return SwapRouter.v3TradeWithHighPriceImpact(trades);\n    }\n  }\n\n  private static v3TradeWithHighPriceImpact(\n    trade:\n      | Trade<Currency, Currency, TradeType>\n      | TradeSDK<Currency, Currency, TradeType>,\n  ): boolean {\n    return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD);\n  }\n\n  private static getPositionAmounts(\n    position: Position,\n    zeroForOne: boolean,\n  ): {\n    positionAmountIn: CurrencyAmount<Currency>;\n    positionAmountOut: CurrencyAmount<Currency>;\n  } {\n    const { amount0, amount1 } = position.mintAmounts;\n    const currencyAmount0 = CurrencyAmount.fromRawAmount(\n      position.pool.token0,\n      amount0,\n    );\n    const currencyAmount1 = CurrencyAmount.fromRawAmount(\n      position.pool.token1,\n      amount1,\n    );\n\n    const [positionAmountIn, positionAmountOut] = zeroForOne\n      ? [currencyAmount0, currencyAmount1]\n      : [currencyAmount1, currencyAmount0];\n    return { positionAmountIn, positionAmountOut };\n  }\n}\n","const tokens = [\n  {\n    symbol: \"WETH\",\n    name: \"Wrapped Ethereum\",\n    icon: \"/icons/weth.svg\",\n    decimals: 18,\n    address: \"0x98E1817244d130D8fE05591ba517d3f24Db035Ec\",\n    coingeckoId: \"ethereum\",\n  },\n  {\n    symbol: \"USDC\",\n    name: \"USD Coin\",\n    icon: \"/icons/usdc.png\",\n    decimals: 18,\n    address: \"0xD1fE20F19f18F4f26CbCf97a2367a47c3866d98e\",\n    coingeckoId: \"usdc\",\n  },\n];\nexport const DEFAULT_TOKEN_LIST = {\n  name: \"Votopia Default\",\n  timestamp: new Date().toISOString(),\n  version: {\n    major: 1,\n    minor: 0,\n    patch: 0,\n  },\n  tags: {},\n  logoURI: \"ipfs://QmNa8mQkrNKp1WEEeGjFezDmDeodkWRevGFN8JCV7b4Xir\",\n  keywords: [\"votopia\", \"default\"],\n  tokens,\n};\n","import { Currency, CurrencyAmount, Percent, Price } from \"../entities\";\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<\n  TBase extends Currency,\n  TQuote extends Currency,\n>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>,\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount);\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount\n    .subtract(outputAmount)\n    .divide(quotedOutputAmount);\n  return new Percent(priceImpact.numerator, priceImpact.denominator);\n}\n","import invariant from \"tiny-invariant\";\nimport { TickMath } from \"./tickMath\";\n\n/**\n * Returns the closest tick that is nearest a given tick and usable for the given tick spacing\n * @param tick the target tick\n * @param tickSpacing the spacing of the pool\n */\nexport function nearestUsableTick(tick: number, tickSpacing: number) {\n  invariant(\n    Number.isInteger(tick) && Number.isInteger(tickSpacing),\n    \"INTEGERS\",\n  );\n  invariant(tickSpacing > 0, \"TICK_SPACING\");\n  invariant(\n    tick >= TickMath.MIN_TICK && tick <= TickMath.MAX_TICK,\n    \"TICK_BOUND\",\n  );\n  const rounded = Math.round(tick / tickSpacing) * tickSpacing;\n  if (rounded < TickMath.MIN_TICK) return rounded + tickSpacing;\n  else if (rounded > TickMath.MAX_TICK) return rounded - tickSpacing;\n  else return rounded;\n}\n"],"names":["FACTORY_ADDRESS","ZERO_ADDRESS","ADDRESS_MAP","v3CoreFactoryAddress","multicallAddress","quoterV2Address","nonfungiblePositionManagerAddress","tickLensAddress","swapRouter02Address","TradeType","Rounding","FeeAmount","MaxUint256","JSBI","BigInt","TICK_SPACINGS","_TICK_SPACINGS","LOWEST","LOW","MEDIUM","HIGH","NEGATIVE_ONE","ZERO","ONE","Q96","exponentiate","Q192","POOL_INIT_CODE_HASH","MSG_SENDER","ADDRESS_THIS","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","this","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","_this","call","lessThanOrEqual","decimalScale","decimals","_inheritsLoose","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","fraction","quote","currencyAmount","adjustedForDecimals","ONE_HUNDRED","toPercent","Percent","BaseCurrency","symbol","name","icon","coingeckoId","NativeCurrency","_BaseCurrency","Token","address","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","NoTickDataProvider","getTick","_getTick","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_tick","wrap","_context","prev","next","ERROR_MESSAGE","stop","_x","apply","nextInitializedTickWithinOneWord","_nextInitializedTickWithinOneWord","_callee2","_lte","_tickSpacing","_context2","_x2","_x3","_x4","Tick","index","liquidityGross","liquidityNet","TickMath","MIN_TICK","MAX_TICK","TickListDataProvider","ticks","tickSpacing","ticksMapped","map","t","TickList","validateList","tick","abrupt","lte","NO_TICK_DATA_PROVIDER_DEFAULT","Pool","tokenA","tokenB","fee","sqrtRatioX96","liquidity","tickCurrent","tickCurrentSqrtRatioX96","getSqrtRatioAtTick","nextTickSqrtRatioX96","greaterThanOrEqual","token0","token1","tickDataProvider","isArray","getAddress","initCodeHashManualOverride","factoryAddressOverride","computePoolAddress","factoryAddress","involvesToken","token","priceOf","token0Price","token1Price","getOutputAmount","_getOutputAmount","inputAmount","sqrtPriceLimitX96","zeroForOne","_yield$this$swap","swap","sent","amountCalculated","getInputAmount","_getInputAmount","outputAmount","_yield$this$swap2","_swap","_callee3","amountSpecified","exactInput","state","step","_yield$this$tickDataP","_SwapMath$computeSwap","_context3","MIN_SQRT_RATIO","MAX_SQRT_RATIO","amountSpecifiedRemaining","sqrtPriceX96","notEqual","sqrtPriceStartX96","tickNext","initialized","sqrtPriceNextX96","SwapMath","computeSwapStep","amountIn","amountOut","feeAmount","t0","t1","LiquidityMath","addDelta","getTickAtSqrtRatio","_x5","_x6","_x7","_this$_token0Price","_token0Price","_this$_token1Price","_token1Price","FullMath","mulDivRoundingUp","a","b","product","MaxUint160","multiplyIn256","x","y","bitwiseAnd","SqrtPriceMath","getAmount0Delta","sqrtRatioAX96","sqrtRatioBX96","roundUp","numerator1","leftShift","numerator2","getAmount1Delta","_ref2","getNextSqrtPriceFromInput","sqrtPX96","getNextSqrtPriceFromAmount0RoundingUp","getNextSqrtPriceFromAmount1RoundingDown","getNextSqrtPriceFromOutput","amount","sum","TWO","POWERS_OF_2","pow","mostSignificantBit","_step","msb","_iterator","_createForOfIteratorHelperLoose","done","_step$value","value","power","signedRightShift","mulShift","val","mulBy","Q32","absTick","ratio","r","sqrtRatioX128","log_2","i","f","bitwiseOr","log_sqrt10001","tickLow","toNumber","tickHigh","Position","pool","tickLower","tickUpper","ratiosAfterSlippage","slippageTolerance","priceLower","asFraction","priceUpper","sqrtRatioX96Lower","encodeSqrtRatioX96","sqrtRatioX96Upper","mintAmountsWithSlippage","_this$ratiosAfterSlip","poolLower","poolUpper","positionThatWillBeCreated","fromAmounts","_extends","mintAmounts","useFullPrecision","amount0","amount1","burnAmountsWithSlippage","_this$ratiosAfterSlip2","maxLiquidityForAmounts","fromAmount0","_ref3","fromAmount1","_ref4","tickToPrice","_token0Amount","_token1Amount","_mintAmounts","RouteSDK","pools","input","output","wrappedInput","tokenPath","entries","currentInputToken","nextToken","push","_midPrice","price","slice","reduce","nextInput","Route","_RouteSDK","v3Route","path","ONE_HUNDRED_PERCENT","ZERO_PERCENT","tradeComparator","swaps","total","cur","route","Protocol","TradeSDK","routes","tradeType","inputCurrency","outputCurrency","every","numPools","poolAddressSet","Set","_step2","_iterator2","size","exactIn","_exactIn","fromRoute","EXACT_INPUT","exactOut","_exactOut","EXACT_OUTPUT","_fromRoute","amounts","_i","_pool","fromRoutes","_fromRoutes","_callee4","populatedRoutes","_iterator3","_step3","_step3$value","_i2","_pool2","_context4","_x8","_x9","createUncheckedTrade","constructorArguments","createUncheckedTradeWithMultipleRoutes","minimumAmountOut","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","worstExecutionPrice","bestTradeExactIn","_bestTradeExactIn","_callee5","currencyAmountIn","currencyOut","_temp","currentPools","nextAmountIn","bestTrades","maxNumResults","_ref5$maxNumResults","maxHops","_ref5$maxHops","_ref5","tokenOut","_context5","isInsufficientInputAmountError","sortedInsert","t2","concat","t3","t4","t5","poolsExcludingThisPool","_x10","_x11","_x12","_x13","_x14","_x15","_x16","bestTradeExactOut","_bestTradeExactOut","_callee6","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref6$maxNumResults","_ref6$maxHops","_ref6","tokenIn","_context6","isInsufficientReservesError","_x17","_x18","_x19","_x20","_x21","_x22","_x23","_inputAmount","totalInputFromRoutes","_ref7","_outputAmount","totalOutputFromRoutes","_ref8","_this$_executionPrice","_executionPrice","_priceImpact","_step4","spotOutputAmount","_iterator4","_step4$value","midPrice","priceImpact","Trade","_ref9","v3Routes","_step5","_iterator5","_step5$value","routev3","_ref10","_ref11","_step6","_ref12","_iterator6","_step7","_iterator7","_proto2","_fromRoutes2","_callee7","populatedV3Routes","_iterator8","_step8","_step8$value","v3Trade","_context7","_x24","_x25","_fromRoute2","_callee8","_context8","_x26","_x27","_x28","_ref13","_ref14","_this$_executionPrice2","isNative","outputTax","_step9","_iterator9","_step9$value","postTaxInputAmount","inputTax","preTaxOutputAmount","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","sqrt","Math","floor","z","validateAndParseAddress","error","startsWith0xLen42HexRegex","getCreate2Address","keccak256","defaultAbiCoder","encode","MAX_FEE","sqrtRatioCurrentX96","sqrtRatioTargetX96","amountRemaining","feePips","returnValues","amountRemainingLessFee","sqrtRatioNextX96","max","isSorted","list","tickComparator","accumulator","isBelowSmallest","isAtOrAboveLargest","binarySearch","l","nextInitializedTick","compressed","minimum","maximum","min","maxLiquidityForAmount0Imprecise","intermediate","maxLiquidityForAmount0Precise","maxLiquidityForAmount1","maxLiquidityForAmount0","liquidity0","liquidity1","baseToken","quoteToken","ratioX192","encodeRouteToPath","exactOutput","_route$pools$reduce","inputToken","types","outputToken","pack","reverse","Q256","subIn256","difference","TickLibrary","getFeeGrowthInside","feeGrowthOutsideLower","feeGrowthOutsideUpper","feeGrowthGlobal0X128","feeGrowthGlobal1X128","feeGrowthBelow0X128","feeGrowthBelow1X128","feeGrowthAbove0X128","feeGrowthAbove1X128","feeGrowthOutside0X128","feeGrowthOutside1X128","Q128","PositionLibrary","getTokensOwed","feeGrowthInside0LastX128","feeGrowthInside1LastX128","feeGrowthInside0X128","feeGrowthInside1X128","toHex","bigintIsh","hex","Multicall","encodeMulticall","calldatas","INTERFACE","encodeFunctionData","Interface","IMulticall","SelfPermit","encodePermit","options","nonce","expiry","v","s","deadline","ISelfPermit","Payments","encodeFeeBips","encodeUnwrapWETH9","amountMinimum","recipient","feeOptions","feeBips","feeRecipient","encodeSweepToken","encodeRefundETH","IPeripheryPaymentsWithFee","MaxUint128","isMint","Object","keys","some","k","NonfungiblePositionManager","encodeCreate","createCallParameters","calldata","addCallParameters","position","_position$mintAmounts","amount0Desired","amount1Desired","minimumAmounts","amount0Min","amount1Min","createPool","token0Permit","token1Permit","tokenId","useNative","wrappedValue","encodeCollect","involvesETH","expectedCurrencyOwed0","expectedCurrencyOwed1","amount0Max","amount1Max","tokenAmount","collectCallParameters","removeCallParameters","partialPosition","liquidityPercentage","_partialPosition$burn","permit","spender","_options$collectOptio","collectOptions","rest","_objectWithoutPropertiesLoose","_excluded","burnToken","safeTransferFromParameters","sender","data","INonfungiblePositionManager","MulticallExtended","validation","startsWith","previousBlockhash","bytes32","match","validateAndParseBytes32","abi","PaymentsExtended","encodePull","encodeWrapETH","ApprovalTypes","USDC","WRAPPED_NATIVE_TOKEN","NATIVE_CURRENCY","_NativeCurrency","_NativeCurrenty","ApproveAndCall","encodeApproveMax","encodeApproveMaxMinusOne","encodeApproveZeroThenMax","encodeApproveZeroThenMaxMinusOne","encodeCallPositionManager","encodedMulticall","encodeAddLiquidity","minimalPosition","addLiquidityOptions","encodeApprove","approvalType","MAX","MAX_MINUS_ONE","ZERO_THEN_MAX","ZERO_THEN_MAX_MINUS_ONE","REFUND_ETH_PRICE_IMPACT_THRESHOLD","SwapRouter","encodeV3Swap","trade","routerMustCustody","performAggregatedSlippageCheck","singleHop","amountOutMinimum","amountInMaximum","encodeSwaps","trades","isSwapAndAdd","individualTrades","_step2$value","numberOfTrades","sampleTrade","inputIsNative","outputIsNative","inputTokenPermit","ZERO_IN","ZERO_OUT","quoteAmountOut","totalAmountIn","swapCallParameters","_SwapRouter$encodeSwa","riskOfPartialFill","deadlineOrPreviousBlockhash","swapAndAddCallParameters","tokenInApprovalType","tokenOutApprovalType","_SwapRouter$encodeSwa2","totalAmountSwapped","outputTokenPermit","_SwapRouter$getPositi","getPositionAmounts","positionAmountIn","positionAmountOut","amountOutRemaining","NOT_REQUIRED","v3TradeWithHighPriceImpact","currencyAmount0","currencyAmount1","DEFAULT_TOKEN_LIST","timestamp","Date","toISOString","version","major","minor","patch","tags","logoURI","keywords","tokens","test","quotedOutputAmount","rounded","round","sorted","nextTickPrice"],"mappings":"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"}